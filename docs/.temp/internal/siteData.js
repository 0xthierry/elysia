/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "VT",
  "description": "",
  "base": "/",
  "headTags": [],
  "pages": [
    {
      "title": "🦊 KingWorld",
      "frontmatter": {},
      "regularPath": "/api/",
      "relativePath": "api/README.md",
      "key": "v-88efbe80",
      "path": "/api/",
      "headers": [
        {
          "level": 2,
          "title": "Feature",
          "slug": "feature",
          "normalizedTitle": "feature",
          "charIndex": 205
        },
        {
          "level": 2,
          "title": "Ecosystem",
          "slug": "ecosystem",
          "normalizedTitle": "ecosystem",
          "charIndex": 621
        },
        {
          "level": 2,
          "title": "Quick Start",
          "slug": "quick-start",
          "normalizedTitle": "quick start",
          "charIndex": 830
        },
        {
          "level": 2,
          "title": "Routing",
          "slug": "routing",
          "normalizedTitle": "routing",
          "charIndex": 1225
        },
        {
          "level": 2,
          "title": "Handler",
          "slug": "handler",
          "normalizedTitle": "handler",
          "charIndex": 4005
        },
        {
          "level": 2,
          "title": "Handler Request",
          "slug": "handler-request",
          "normalizedTitle": "handler request",
          "charIndex": 4662
        },
        {
          "level": 2,
          "title": "Store",
          "slug": "store",
          "normalizedTitle": "store",
          "charIndex": 5820
        },
        {
          "level": 2,
          "title": "Lifecycle",
          "slug": "lifecycle",
          "normalizedTitle": "lifecycle",
          "charIndex": 6284
        },
        {
          "level": 2,
          "title": "Local Hook",
          "slug": "local-hook",
          "normalizedTitle": "local hook",
          "charIndex": 7739
        },
        {
          "level": 3,
          "title": "PreRequestHandler",
          "slug": "prerequesthandler",
          "normalizedTitle": "prerequesthandler",
          "charIndex": 9243
        },
        {
          "level": 3,
          "title": "Handler (Event)",
          "slug": "handler-event",
          "normalizedTitle": "handler (event)",
          "charIndex": 9500
        }
      ],
      "headersStr": "Feature Ecosystem Quick Start Routing Handler Handler Request Store Lifecycle Local Hook PreRequestHandler Handler (Event)",
      "content": "# 🦊 KingWorld\n\nFast, and friendly Bun web framework.\n\nFocusing on speed, and simplicity.\n\n# Named after my favorite VTuber (Shirakami Fubuki) and composer (Sasakure.UK) song KINGWORLD/白上フブキ(Original)\n\n\n# Feature\n\n * Speed - Build for speed and optimized for Bun in mind.\n * Scalable - Designed for micro-service, decoupled logic and treat everything as building block\n * Simplicity - Composed patterns into plugin, removing redundant logic into one simple plugin\n * Friendliness - Familiar pattern with enhance TypeScript supports eg. auto infers type paramters\n\n⚡️ KingWorld is one of the fastest Bun web framework\n\n\n# Ecosystem\n\nKingWorld can be heavily customized with the use of plugins.\n\nOfficial plugins:\n\n * Static for serving static file/folders\n * Cookie for reading/setting cookie\n * CORS for handling CORs request\n\n\n# Quick Start\n\nKingWorld is a web framework based on Bun.\n\nbun add kingworld\n\n\nNow create index.ts, and place the following:\n\nimport KingWorld from 'kingworld'\n\nnew KingWorld()\n    .get(\"/\", () => \"🦊 Now foxing\")\n    .listen(3000)\n\n\nAnd run the server:\n\nbun index.ts\n\n\nThen simply open http://localhost:3000 in your browser.\n\nCongrats! You have just create a new web server in KingWorld 🎉🎉\n\n\n# Routing\n\nCommon HTTP methods have a built-in methods for convenient usage:\n\napp.get(\"/hi\", () => \"Hi\")\n    .post(\"/hi\", () => \"From Post\")\n    .put(\"/hi\", () => \"From Put\")\n    .on(\"M-SEARCH\", async () => \"Custom Method\")\n    .listen(3000)\n\n// [GET] /hi => \"Hi\"\n// [POST] /hi => \"From Post\"\n// [PUT] /hi => \"From Put\"\n// [M-SEARCH] /hi => \"Custom Method\"\n\n\nTo return JSON, simply return any serializable object:\n\napp.get(\"/json\", () => ({\n    hi: 'KingWorld'\n}))\n\n// [GET] /json => {\"hi\": \"KingWorld\"}\n\n\nAll values returned from handler will be transformed into Response.\n\nYou can return Response if you want to declaratively control the response.\n\napp\n    .get(\"/number\", () => 1)\n    .get(\"/boolean\", () => true)\n    .get(\"/promise\", () => new Promise((resovle) => resolve(\"Ok\")))\n    .get(\"/response\", () => new Response(\"Hi\", {\n        status: 200,\n        headers: {\n            \"x-powered-by\": \"KingWorld\"\n        }\n    }))\n\n// [GET] /number => \"1\"\n// [GET] /boolean => \"true\"\n// [GET] /promise => \"Ok\"\n// [GET] /response => \"Hi\"\n\n\nYou can use ctx.status to explictly set status code without creating Response\n\napp\n    .get(\"/401\", ({ status }) => {\n        status(401)\n\n        return \"This should be 401\"\n    })\n\n\nFiles are also transformed to response. Simply return Bun.file to serve static file.\n\napp.get(\"/tako\", () => Bun.file('./example/takodachi.png'))\n\n\nTo get path paramameters, prefix the path with a colon:\n\napp.get(\"/id/:id\", ({ params: { id } }) => id)\n\n// [GET] /id/123 => 123\n\n\nWildcard works as expected:\n\napp.get(\"/wildcard/*\", () => \"Hi\")\n\n// [GET] /wildcard/ok => \"Hi\"\n// [GET] /wildcard/abc/def/ghi => \"Hi\"\n\n\nFor a fallback page, use default:\n\napp.get(\"/\", () => \"Hi\")\n    .default(() => new Response(\"Not stonk :(\", {\n        status: 404\n    }))\n\n// [GET] / => \"Not stonk :(\"\n\n\nYou can group multiple route with a prefix with group:\n\napp\n    .get(\"/\", () => \"Hi\")\n    .group(\"/auth\", app => {\n        app\n            .get(\"/\", () => \"Hi\")\n            .post(\"/sign-in\", ({ body }) => body)\n            .put(\"/sign-up\", ({ body }) => body)\n    })\n    .listen(3000)\n\n// [GET] /auth/sign-in => \"Hi\"\n// [POST] /auth/sign-in => <body>\n// [PUT] /auth/sign-up => <body>\n\n\nAnd you can decouple the route logic to a separate plugin.\n\nimport KingWorld, { type Plugin } from 'kingworld'\n\nconst hi = (app: KingWorld) => app\n    .get('/hi', () => 'Hi')\n\nconst app = new KingWorld()\n    .use(hi)\n    .get('/', () => 'KINGWORLD')\n    .listen(3000)\n\n// [GET] / => \"KINGWORLD\"\n// [GET] /hi => \"Hi\"\n\n\nLastly, you can specified hostname to listen if need:\n\nimport KingWorld, { type Plugin } from 'kingworld'\n\nconst app = new KingWorld()\n    .get('/', () => 'KINGWORLD')\n    .listen({\n        port: 3000,\n        hostname: '0.0.0.0'\n    })\n\n// [GET] / => \"KINGWORLD\"\n\n\n\n# Handler\n\nHandler is a callback function that returns Response. Used in HTTP method handler.\n\nnew KingWorld()\n    .get(\n        '/', \n        // This is handler\n        () => \"KingWorld\"\n    )\n    .listen(3000)\n\n\nBy default, handler will accepts two parameters: request and store.\n\n// Simplified Handler\ntype Handler = (request: ParsedRequest, store: Instance['store']) => Response\n\nconst handler: Handler = (request: {\n    request: Request\n    query: ParsedUrlQuery\n    params: Record<string, string>\n    headers: Record<string, string>\n    body: Promise<string | Object>\n    responseHeaders: Record<string, unknown>\n    store: Record<any, unknown>\n})\n\n\n\n# Handler Request\n\nHandler's request consists of\n\n * request [Request]\n   * Native fetch Request\n * query [ParsedUrlQuery]\n   * Parsed Query Parameters as Record<string, string>\n   * Default: {}\n   * Example:\n     * path: /hi?name=fubuki&game=KingWorld\n     * query: { \"name\": \"fubuki\", \"game\": \"KingWorld\" }\n * params [Record<string, string>]\n   * Path paramters as object\n   * Default: {}\n   * Example:\n     * Code: app.get(\"/id/:name/:game\")\n     * path: /id/kurokami/KingWorld\n     * params: { \"name\": \"kurokami\", \"game\": \"KingWorld\" }\n * headers [Record<string, string>]\n   * Function which returns request's headers\n * body [Promise<string | Object>]\n   * Function which returns request's body\n   * By default will return either string or Object\n     * Will return Object if request's header contains Content-Type: application/json, and is deserializable\n     * Otherwise, will return string\n * responseHeaders [Record<string, unknown>]\n   * Mutable object reference, will attached to response's header\n   * For example, adding CORS to response as a plugin\n * status [(statusCode: number) => void]\n   * Function to set response status code explictly\n\n\n# Store\n\nStore is a singleton store of the application.\n\nIs recommended for local state, reference of database connection, and other things that need to be available to be used with handler.\n\nnew KingWorld()\n    .state('build', 0.5)\n    .get(\"/build\", ({ store: { build } }) => build)\n    .get(\"/random\", ({ store: { random }}) => random)\n    .listen(3000)\n\n// [GET] /build => 0.5\n\n\nState will be assigned once start, and it's a mutable global store for server.\n\n\n# Lifecycle\n\nKingWorld request's lifecycle can be illustrate as the following:\n\nStart -> (Loop\n    (Try\n        request -> parse ->\n        | routing |\n        transform -> beforeHandle -> <handle> -> afterHandle -> Response\n                  -> beforeHandle -> afterHandle -> Response\n    Catch -> error)\n) -> Stop\n\n\nThe callback that assigned to lifecycle is called hook.\n\n# Start\n\n * start [VoidLifeCycle]\n   * Call right before server start\n\n# Before Route\n\n * request [BeforeRequestHandler]\n   * Call on new request\n * parse [BodyParser]\n   * Call while parsing body\n   * If truthy value return, value will be assigned to body\n\n# Post Handler\n\n * transform [Handler]\n   * Called before validating request\n   * Use to transform request's body, params, query before validation\n * beforeHandle [Handler]\n   * Handle request before executing path handler\n   * If value returned, will skip to Response process\n * afterHandle [AfterRequestHandler]\n   * Handle request after executing path handler\n   * Use to transform response of beforeHandle and handle, eg. compression\n\n# Stop\n\n * stop [VoidLifeCycle]\n   * Call after server stop, use for cleaning up\n\nLifecycle can be assigned with app.on<lifecycle name>() or app.on(lifeCycleName, callback):\n\nFor example, assigning transform to a request:\n\napp\n    // ? Transform params 'id' to number if available\n    .onTransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id\n    })\n\n\n\n# Local Hook\n\nThere's 2 type of hook\n\n * Global Hook\n   * Assign to every handler\n * Local Hook\n   * Assigned by third parameters of Route Handler or app.<method>(path, handler, localHook)\n   * Affected only scoped handler\n\napp\n    // ? Global Hook\n    .onTransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id + 1\n    })\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        // ? Local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"Shirakami Fubuki\"\n            }\n        }\n    )\n    .get(\"/new/:id\", ({ params: { id, name } }) => `${id} ${name}`)\n    .listen(3000)\n\n// [GET] /id/2/kson => \"3 kson\"\n// [GET] /id/1/白上フブキ => \"2 Shirakami Fubuki\"\n// [GET] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\nYou can have multiple local hooks as well by assigning it as array:\n\napp\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        {\n            transform: [\n                ({ params }) => {\n                    if(params.id)\n                        params.id = +params.id + 1\n                },\n                ({ params }) => {\n                    if(params.name === \"白上フブキ\")\n                        params.name = \"Shirakami Fubuki\"\n                }\n            ]\n        }\n    )\n    .listen(3000)\n\n// [GET] /id/2/kson => \"3 kson\"\n// [GET] /id/1/白上フブキ => \"2 Shirakami Fubuki\"\n// [GET] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\n\n# PreRequestHandler\n\nCallback assign to lifecycle before routing.\n\nAs it's handle before routing, there's no params, query.\n\ntype PreRequestHandler = (request: Request, store: Store) => void\n\n\nLifecycle that assigned with PreRequestHandler:\n\n * onRequest\n\n\n# Handler (Event)\n\nCallback assign to lifecycle after routing.\n\nAccept same value as [path handler,",
      "normalizedContent": "# 🦊 kingworld\n\nfast, and friendly bun web framework.\n\nfocusing on speed, and simplicity.\n\n# named after my favorite vtuber (shirakami fubuki) and composer (sasakure.uk) song kingworld/白上フブキ(original)\n\n\n# feature\n\n * speed - build for speed and optimized for bun in mind.\n * scalable - designed for micro-service, decoupled logic and treat everything as building block\n * simplicity - composed patterns into plugin, removing redundant logic into one simple plugin\n * friendliness - familiar pattern with enhance typescript supports eg. auto infers type paramters\n\n⚡️ kingworld is one of the fastest bun web framework\n\n\n# ecosystem\n\nkingworld can be heavily customized with the use of plugins.\n\nofficial plugins:\n\n * static for serving static file/folders\n * cookie for reading/setting cookie\n * cors for handling cors request\n\n\n# quick start\n\nkingworld is a web framework based on bun.\n\nbun add kingworld\n\n\nnow create index.ts, and place the following:\n\nimport kingworld from 'kingworld'\n\nnew kingworld()\n    .get(\"/\", () => \"🦊 now foxing\")\n    .listen(3000)\n\n\nand run the server:\n\nbun index.ts\n\n\nthen simply open http://localhost:3000 in your browser.\n\ncongrats! you have just create a new web server in kingworld 🎉🎉\n\n\n# routing\n\ncommon http methods have a built-in methods for convenient usage:\n\napp.get(\"/hi\", () => \"hi\")\n    .post(\"/hi\", () => \"from post\")\n    .put(\"/hi\", () => \"from put\")\n    .on(\"m-search\", async () => \"custom method\")\n    .listen(3000)\n\n// [get] /hi => \"hi\"\n// [post] /hi => \"from post\"\n// [put] /hi => \"from put\"\n// [m-search] /hi => \"custom method\"\n\n\nto return json, simply return any serializable object:\n\napp.get(\"/json\", () => ({\n    hi: 'kingworld'\n}))\n\n// [get] /json => {\"hi\": \"kingworld\"}\n\n\nall values returned from handler will be transformed into response.\n\nyou can return response if you want to declaratively control the response.\n\napp\n    .get(\"/number\", () => 1)\n    .get(\"/boolean\", () => true)\n    .get(\"/promise\", () => new promise((resovle) => resolve(\"ok\")))\n    .get(\"/response\", () => new response(\"hi\", {\n        status: 200,\n        headers: {\n            \"x-powered-by\": \"kingworld\"\n        }\n    }))\n\n// [get] /number => \"1\"\n// [get] /boolean => \"true\"\n// [get] /promise => \"ok\"\n// [get] /response => \"hi\"\n\n\nyou can use ctx.status to explictly set status code without creating response\n\napp\n    .get(\"/401\", ({ status }) => {\n        status(401)\n\n        return \"this should be 401\"\n    })\n\n\nfiles are also transformed to response. simply return bun.file to serve static file.\n\napp.get(\"/tako\", () => bun.file('./example/takodachi.png'))\n\n\nto get path paramameters, prefix the path with a colon:\n\napp.get(\"/id/:id\", ({ params: { id } }) => id)\n\n// [get] /id/123 => 123\n\n\nwildcard works as expected:\n\napp.get(\"/wildcard/*\", () => \"hi\")\n\n// [get] /wildcard/ok => \"hi\"\n// [get] /wildcard/abc/def/ghi => \"hi\"\n\n\nfor a fallback page, use default:\n\napp.get(\"/\", () => \"hi\")\n    .default(() => new response(\"not stonk :(\", {\n        status: 404\n    }))\n\n// [get] / => \"not stonk :(\"\n\n\nyou can group multiple route with a prefix with group:\n\napp\n    .get(\"/\", () => \"hi\")\n    .group(\"/auth\", app => {\n        app\n            .get(\"/\", () => \"hi\")\n            .post(\"/sign-in\", ({ body }) => body)\n            .put(\"/sign-up\", ({ body }) => body)\n    })\n    .listen(3000)\n\n// [get] /auth/sign-in => \"hi\"\n// [post] /auth/sign-in => <body>\n// [put] /auth/sign-up => <body>\n\n\nand you can decouple the route logic to a separate plugin.\n\nimport kingworld, { type plugin } from 'kingworld'\n\nconst hi = (app: kingworld) => app\n    .get('/hi', () => 'hi')\n\nconst app = new kingworld()\n    .use(hi)\n    .get('/', () => 'kingworld')\n    .listen(3000)\n\n// [get] / => \"kingworld\"\n// [get] /hi => \"hi\"\n\n\nlastly, you can specified hostname to listen if need:\n\nimport kingworld, { type plugin } from 'kingworld'\n\nconst app = new kingworld()\n    .get('/', () => 'kingworld')\n    .listen({\n        port: 3000,\n        hostname: '0.0.0.0'\n    })\n\n// [get] / => \"kingworld\"\n\n\n\n# handler\n\nhandler is a callback function that returns response. used in http method handler.\n\nnew kingworld()\n    .get(\n        '/', \n        // this is handler\n        () => \"kingworld\"\n    )\n    .listen(3000)\n\n\nby default, handler will accepts two parameters: request and store.\n\n// simplified handler\ntype handler = (request: parsedrequest, store: instance['store']) => response\n\nconst handler: handler = (request: {\n    request: request\n    query: parsedurlquery\n    params: record<string, string>\n    headers: record<string, string>\n    body: promise<string | object>\n    responseheaders: record<string, unknown>\n    store: record<any, unknown>\n})\n\n\n\n# handler request\n\nhandler's request consists of\n\n * request [request]\n   * native fetch request\n * query [parsedurlquery]\n   * parsed query parameters as record<string, string>\n   * default: {}\n   * example:\n     * path: /hi?name=fubuki&game=kingworld\n     * query: { \"name\": \"fubuki\", \"game\": \"kingworld\" }\n * params [record<string, string>]\n   * path paramters as object\n   * default: {}\n   * example:\n     * code: app.get(\"/id/:name/:game\")\n     * path: /id/kurokami/kingworld\n     * params: { \"name\": \"kurokami\", \"game\": \"kingworld\" }\n * headers [record<string, string>]\n   * function which returns request's headers\n * body [promise<string | object>]\n   * function which returns request's body\n   * by default will return either string or object\n     * will return object if request's header contains content-type: application/json, and is deserializable\n     * otherwise, will return string\n * responseheaders [record<string, unknown>]\n   * mutable object reference, will attached to response's header\n   * for example, adding cors to response as a plugin\n * status [(statuscode: number) => void]\n   * function to set response status code explictly\n\n\n# store\n\nstore is a singleton store of the application.\n\nis recommended for local state, reference of database connection, and other things that need to be available to be used with handler.\n\nnew kingworld()\n    .state('build', 0.5)\n    .get(\"/build\", ({ store: { build } }) => build)\n    .get(\"/random\", ({ store: { random }}) => random)\n    .listen(3000)\n\n// [get] /build => 0.5\n\n\nstate will be assigned once start, and it's a mutable global store for server.\n\n\n# lifecycle\n\nkingworld request's lifecycle can be illustrate as the following:\n\nstart -> (loop\n    (try\n        request -> parse ->\n        | routing |\n        transform -> beforehandle -> <handle> -> afterhandle -> response\n                  -> beforehandle -> afterhandle -> response\n    catch -> error)\n) -> stop\n\n\nthe callback that assigned to lifecycle is called hook.\n\n# start\n\n * start [voidlifecycle]\n   * call right before server start\n\n# before route\n\n * request [beforerequesthandler]\n   * call on new request\n * parse [bodyparser]\n   * call while parsing body\n   * if truthy value return, value will be assigned to body\n\n# post handler\n\n * transform [handler]\n   * called before validating request\n   * use to transform request's body, params, query before validation\n * beforehandle [handler]\n   * handle request before executing path handler\n   * if value returned, will skip to response process\n * afterhandle [afterrequesthandler]\n   * handle request after executing path handler\n   * use to transform response of beforehandle and handle, eg. compression\n\n# stop\n\n * stop [voidlifecycle]\n   * call after server stop, use for cleaning up\n\nlifecycle can be assigned with app.on<lifecycle name>() or app.on(lifecyclename, callback):\n\nfor example, assigning transform to a request:\n\napp\n    // ? transform params 'id' to number if available\n    .ontransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id\n    })\n\n\n\n# local hook\n\nthere's 2 type of hook\n\n * global hook\n   * assign to every handler\n * local hook\n   * assigned by third parameters of route handler or app.<method>(path, handler, localhook)\n   * affected only scoped handler\n\napp\n    // ? global hook\n    .ontransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id + 1\n    })\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        // ? local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"shirakami fubuki\"\n            }\n        }\n    )\n    .get(\"/new/:id\", ({ params: { id, name } }) => `${id} ${name}`)\n    .listen(3000)\n\n// [get] /id/2/kson => \"3 kson\"\n// [get] /id/1/白上フブキ => \"2 shirakami fubuki\"\n// [get] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\nyou can have multiple local hooks as well by assigning it as array:\n\napp\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        {\n            transform: [\n                ({ params }) => {\n                    if(params.id)\n                        params.id = +params.id + 1\n                },\n                ({ params }) => {\n                    if(params.name === \"白上フブキ\")\n                        params.name = \"shirakami fubuki\"\n                }\n            ]\n        }\n    )\n    .listen(3000)\n\n// [get] /id/2/kson => \"3 kson\"\n// [get] /id/1/白上フブキ => \"2 shirakami fubuki\"\n// [get] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\n\n# prerequesthandler\n\ncallback assign to lifecycle before routing.\n\nas it's handle before routing, there's no params, query.\n\ntype prerequesthandler = (request: request, store: store) => void\n\n\nlifecycle that assigned with prerequesthandler:\n\n * onrequest\n\n\n# handler (event)\n\ncallback assign to lifecycle after routing.\n\naccept same value as [path handler,",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Class: Context",
      "frontmatter": {},
      "regularPath": "/api/classes/Context.html",
      "relativePath": "api/classes/Context.md",
      "key": "v-1625d3a5",
      "path": "/api/classes/Context.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 35
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 161
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 183
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 216
        },
        {
          "level": 3,
          "title": "Methods",
          "slug": "methods",
          "normalizedTitle": "methods",
          "charIndex": 322
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 183
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 200
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 216
        },
        {
          "level": 3,
          "title": "_redirect",
          "slug": "redirect",
          "normalizedTitle": "_redirect",
          "charIndex": 231
        },
        {
          "level": 3,
          "title": "_status",
          "slug": "status",
          "normalizedTitle": "_status",
          "charIndex": 244
        },
        {
          "level": 3,
          "title": "body",
          "slug": "body",
          "normalizedTitle": "body",
          "charIndex": 255
        },
        {
          "level": 3,
          "title": "params",
          "slug": "params",
          "normalizedTitle": "params",
          "charIndex": 263
        },
        {
          "level": 3,
          "title": "query",
          "slug": "query",
          "normalizedTitle": "query",
          "charIndex": 273
        },
        {
          "level": 3,
          "title": "request",
          "slug": "request",
          "normalizedTitle": "request",
          "charIndex": 282
        },
        {
          "level": 3,
          "title": "responseHeaders",
          "slug": "responseheaders",
          "normalizedTitle": "responseheaders",
          "charIndex": 293
        },
        {
          "level": 3,
          "title": "store",
          "slug": "store",
          "normalizedTitle": "store",
          "charIndex": 130
        },
        {
          "level": 2,
          "title": "Methods",
          "slug": "methods-2",
          "normalizedTitle": "methods",
          "charIndex": 322
        },
        {
          "level": 3,
          "title": "redirect",
          "slug": "redirect-2",
          "normalizedTitle": "redirect",
          "charIndex": 232
        },
        {
          "level": 3,
          "title": "status",
          "slug": "status-2",
          "normalizedTitle": "status",
          "charIndex": 245
        }
      ],
      "headersStr": "Type parameters Table of contents Constructors Properties Methods Constructors constructor Properties _redirect _status body params query request responseHeaders store Methods redirect status",
      "content": "# Class: Context<Route, Store>\n\n\n# Type parameters\n\nNAME    TYPE\nRoute   extends TypedRoute = TypedRoute\nStore   extends default[\"store\"] = default[\"store\"]\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * _redirect\n * _status\n * body\n * params\n * query\n * request\n * responseHeaders\n * store\n\n\n# Methods\n\n * redirect\n * status\n\n\n# Constructors\n\n\n# constructor\n\n• new Context<Route, Store>(x)\n\n# Type parameters\n\nNAME    TYPE\nRoute   extends TypedRoute = TypedRoute\nStore   extends Record<KWKey, any> = Record<KWKey, any>\n\n# Parameters\n\nNAME        TYPE\nx           Object\nx.body      Route[\"body\"]\nx.params    Route[\"params\"]\nx.query     Route[\"query\"] extends Record<string, any> ? any[any] :\n            Record<string, string>\nx.request   Request\nx.store     Store\n\n# Defined in\n\nsrc/context.ts:21\n\n\n# Properties\n\n\n# _redirect\n\n• Optional _redirect: string\n\n# Defined in\n\nsrc/context.ts:19\n\n----------------------------------------\n\n\n# _status\n\n• _status: number = 200\n\n# Defined in\n\nsrc/context.ts:8\n\n----------------------------------------\n\n\n# body\n\n• body: Route[\"body\"]\n\n# Defined in\n\nsrc/context.ts:16\n\n----------------------------------------\n\n\n# params\n\n• params: Route[\"params\"]\n\n# Defined in\n\nsrc/context.ts:15\n\n----------------------------------------\n\n\n# query\n\n• query: Route[\"query\"] extends Record<string, any> ? any[any] : Record<string, string>\n\n# Defined in\n\nsrc/context.ts:12\n\n----------------------------------------\n\n\n# request\n\n• request: Request\n\n# Defined in\n\nsrc/context.ts:11\n\n----------------------------------------\n\n\n# responseHeaders\n\n• responseHeaders: Record<string, string> = {}\n\n# Defined in\n\nsrc/context.ts:9\n\n----------------------------------------\n\n\n# store\n\n• store: Store\n\n# Defined in\n\nsrc/context.ts:17\n\n\n# Methods\n\n\n# redirect\n\n▸ redirect(path, status?): void\n\n# Parameters\n\nNAME     TYPE     DEFAULT VALUE\npath     string   undefined\nstatus   number   301\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/context.ts:41\n\n----------------------------------------\n\n\n# status\n\n▸ status(code): void\n\n# Parameters\n\nNAME   TYPE\ncode   number\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/context.ts:37",
      "normalizedContent": "# class: context<route, store>\n\n\n# type parameters\n\nname    type\nroute   extends typedroute = typedroute\nstore   extends default[\"store\"] = default[\"store\"]\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * _redirect\n * _status\n * body\n * params\n * query\n * request\n * responseheaders\n * store\n\n\n# methods\n\n * redirect\n * status\n\n\n# constructors\n\n\n# constructor\n\n• new context<route, store>(x)\n\n# type parameters\n\nname    type\nroute   extends typedroute = typedroute\nstore   extends record<kwkey, any> = record<kwkey, any>\n\n# parameters\n\nname        type\nx           object\nx.body      route[\"body\"]\nx.params    route[\"params\"]\nx.query     route[\"query\"] extends record<string, any> ? any[any] :\n            record<string, string>\nx.request   request\nx.store     store\n\n# defined in\n\nsrc/context.ts:21\n\n\n# properties\n\n\n# _redirect\n\n• optional _redirect: string\n\n# defined in\n\nsrc/context.ts:19\n\n----------------------------------------\n\n\n# _status\n\n• _status: number = 200\n\n# defined in\n\nsrc/context.ts:8\n\n----------------------------------------\n\n\n# body\n\n• body: route[\"body\"]\n\n# defined in\n\nsrc/context.ts:16\n\n----------------------------------------\n\n\n# params\n\n• params: route[\"params\"]\n\n# defined in\n\nsrc/context.ts:15\n\n----------------------------------------\n\n\n# query\n\n• query: route[\"query\"] extends record<string, any> ? any[any] : record<string, string>\n\n# defined in\n\nsrc/context.ts:12\n\n----------------------------------------\n\n\n# request\n\n• request: request\n\n# defined in\n\nsrc/context.ts:11\n\n----------------------------------------\n\n\n# responseheaders\n\n• responseheaders: record<string, string> = {}\n\n# defined in\n\nsrc/context.ts:9\n\n----------------------------------------\n\n\n# store\n\n• store: store\n\n# defined in\n\nsrc/context.ts:17\n\n\n# methods\n\n\n# redirect\n\n▸ redirect(path, status?): void\n\n# parameters\n\nname     type     default value\npath     string   undefined\nstatus   number   301\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/context.ts:41\n\n----------------------------------------\n\n\n# status\n\n▸ status(code): void\n\n# parameters\n\nname   type\ncode   number\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/context.ts:37",
      "charsets": {}
    },
    {
      "title": "Class: default",
      "frontmatter": {},
      "regularPath": "/api/classes/default.html",
      "relativePath": "api/classes/default.md",
      "key": "v-844b5836",
      "path": "/api/classes/default.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 31
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 125
        },
        {
          "level": 3,
          "title": "Constructors",
          "slug": "constructors",
          "normalizedTitle": "constructors",
          "charIndex": 147
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 180
        },
        {
          "level": 3,
          "title": "Methods",
          "slug": "methods",
          "normalizedTitle": "methods",
          "charIndex": 254
        },
        {
          "level": 2,
          "title": "Constructors",
          "slug": "constructors-2",
          "normalizedTitle": "constructors",
          "charIndex": 147
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor",
          "normalizedTitle": "constructor",
          "charIndex": 164
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 180
        },
        {
          "level": 3,
          "title": "config",
          "slug": "config",
          "normalizedTitle": "config",
          "charIndex": 195
        },
        {
          "level": 3,
          "title": "event",
          "slug": "event",
          "normalizedTitle": "event",
          "charIndex": 205
        },
        {
          "level": 3,
          "title": "router",
          "slug": "router",
          "normalizedTitle": "router",
          "charIndex": 214
        },
        {
          "level": 3,
          "title": "routes",
          "slug": "routes",
          "normalizedTitle": "routes",
          "charIndex": 224
        },
        {
          "level": 3,
          "title": "server",
          "slug": "server",
          "normalizedTitle": "server",
          "charIndex": 234
        },
        {
          "level": 3,
          "title": "store",
          "slug": "store",
          "normalizedTitle": "store",
          "charIndex": 244
        },
        {
          "level": 2,
          "title": "Methods",
          "slug": "methods-2",
          "normalizedTitle": "methods",
          "charIndex": 254
        },
        {
          "level": 3,
          "title": "_addHandler",
          "slug": "addhandler",
          "normalizedTitle": "_addhandler",
          "charIndex": 266
        },
        {
          "level": 3,
          "title": "afterHandle",
          "slug": "afterhandle",
          "normalizedTitle": "afterhandle",
          "charIndex": 281
        },
        {
          "level": 3,
          "title": "connect",
          "slug": "connect",
          "normalizedTitle": "connect",
          "charIndex": 296
        },
        {
          "level": 3,
          "title": "decorate",
          "slug": "decorate",
          "normalizedTitle": "decorate",
          "charIndex": 307
        },
        {
          "level": 3,
          "title": "delete",
          "slug": "delete",
          "normalizedTitle": "delete",
          "charIndex": 319
        },
        {
          "level": 3,
          "title": "get",
          "slug": "get",
          "normalizedTitle": "get",
          "charIndex": 329
        },
        {
          "level": 3,
          "title": "getSchema",
          "slug": "getschema",
          "normalizedTitle": "getschema",
          "charIndex": 336
        },
        {
          "level": 3,
          "title": "getSchemaValidator",
          "slug": "getschemavalidator",
          "normalizedTitle": "getschemavalidator",
          "charIndex": 349
        },
        {
          "level": 3,
          "title": "group",
          "slug": "group",
          "normalizedTitle": "group",
          "charIndex": 371
        },
        {
          "level": 3,
          "title": "guard",
          "slug": "guard",
          "normalizedTitle": "guard",
          "charIndex": 380
        },
        {
          "level": 3,
          "title": "handle",
          "slug": "handle",
          "normalizedTitle": "handle",
          "charIndex": 389
        },
        {
          "level": 3,
          "title": "handleError",
          "slug": "handleerror",
          "normalizedTitle": "handleerror",
          "charIndex": 399
        },
        {
          "level": 3,
          "title": "head",
          "slug": "head",
          "normalizedTitle": "head",
          "charIndex": 414
        },
        {
          "level": 3,
          "title": "listen",
          "slug": "listen",
          "normalizedTitle": "listen",
          "charIndex": 422
        },
        {
          "level": 3,
          "title": "method",
          "slug": "method",
          "normalizedTitle": "method",
          "charIndex": 432
        },
        {
          "level": 3,
          "title": "on",
          "slug": "on",
          "normalizedTitle": "on",
          "charIndex": 135
        },
        {
          "level": 3,
          "title": "onBeforeHandle",
          "slug": "onbeforehandle",
          "normalizedTitle": "onbeforehandle",
          "charIndex": 448
        },
        {
          "level": 3,
          "title": "onError",
          "slug": "onerror",
          "normalizedTitle": "onerror",
          "charIndex": 466
        },
        {
          "level": 3,
          "title": "onParse",
          "slug": "onparse",
          "normalizedTitle": "onparse",
          "charIndex": 477
        },
        {
          "level": 3,
          "title": "onRequest",
          "slug": "onrequest",
          "normalizedTitle": "onrequest",
          "charIndex": 488
        },
        {
          "level": 3,
          "title": "onStart",
          "slug": "onstart",
          "normalizedTitle": "onstart",
          "charIndex": 501
        },
        {
          "level": 3,
          "title": "onStop",
          "slug": "onstop",
          "normalizedTitle": "onstop",
          "charIndex": 512
        },
        {
          "level": 3,
          "title": "onTransform",
          "slug": "ontransform",
          "normalizedTitle": "ontransform",
          "charIndex": 522
        },
        {
          "level": 3,
          "title": "options",
          "slug": "options",
          "normalizedTitle": "options",
          "charIndex": 537
        },
        {
          "level": 3,
          "title": "patch",
          "slug": "patch",
          "normalizedTitle": "patch",
          "charIndex": 548
        },
        {
          "level": 3,
          "title": "post",
          "slug": "post",
          "normalizedTitle": "post",
          "charIndex": 557
        },
        {
          "level": 3,
          "title": "put",
          "slug": "put",
          "normalizedTitle": "put",
          "charIndex": 565
        },
        {
          "level": 3,
          "title": "state",
          "slug": "state",
          "normalizedTitle": "state",
          "charIndex": 572
        },
        {
          "level": 3,
          "title": "stop",
          "slug": "stop",
          "normalizedTitle": "stop",
          "charIndex": 581
        },
        {
          "level": 3,
          "title": "trace",
          "slug": "trace",
          "normalizedTitle": "trace",
          "charIndex": 589
        },
        {
          "level": 3,
          "title": "use",
          "slug": "use",
          "normalizedTitle": "use",
          "charIndex": 598
        }
      ],
      "headersStr": "Type parameters Table of contents Constructors Properties Methods Constructors constructor Properties config event router routes server store Methods _addHandler afterHandle connect decorate delete get getSchema getSchemaValidator group guard handle handleError head listen method on onBeforeHandle onError onParse onRequest onStart onStop onTransform options patch post put state stop trace use",
      "content": "# Class: default<Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends KingWorldInstance = KingWorldInstance\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * config\n * event\n * router\n * routes\n * server\n * store\n\n\n# Methods\n\n * _addHandler\n * afterHandle\n * connect\n * decorate\n * delete\n * get\n * getSchema\n * getSchemaValidator\n * group\n * guard\n * handle\n * handleError\n * head\n * listen\n * method\n * on\n * onBeforeHandle\n * onError\n * onParse\n * onRequest\n * onStart\n * onStop\n * onTransform\n * options\n * patch\n * post\n * put\n * state\n * stop\n * trace\n * use\n\n\n# Constructors\n\n\n# constructor\n\n• new default<Instance>(config?)\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends KingWorldInstance<{ request: Record<KWKey, any> ;\n           store: Record<KWKey, any> }, Instance> = KingWorldInstance<{\n           request: Record<KWKey, any> ; store: Record<KWKey, any> }>\n\n# Parameters\n\nNAME     TYPE\nconfig   Partial<KingWorldConfig>\n\n# Defined in\n\nsrc/index.ts:73\n\n\n# Properties\n\n\n# config\n\n• Private config: KingWorldConfig\n\n# Defined in\n\nsrc/index.ts:69\n\n----------------------------------------\n\n\n# event\n\n• event: LifeCycleStore<Instance>\n\n# Defined in\n\nsrc/index.ts:44\n\n----------------------------------------\n\n\n# router\n\n• Private router: Router\n\n# Defined in\n\nsrc/index.ts:70\n\n----------------------------------------\n\n\n# routes\n\n• Protected routes: InternalRoute<Instance>[] = []\n\n# Defined in\n\nsrc/index.ts:71\n\n----------------------------------------\n\n\n# server\n\n• server: null | Server = null\n\n# Defined in\n\nsrc/index.ts:67\n\n----------------------------------------\n\n\n# store\n\n• store: Instance[\"store\"]\n\n# Defined in\n\nsrc/index.ts:41\n\n\n# Methods\n\n\n# _addHandler\n\n▸ Private _addHandler<Schema, Path>(method, path, handler, hook?): void\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\nmethod    HTTPMethod\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<any, KingWorldInstance<{ request: Record<KWKey,\n          any> ; store: Record<KWKey, any> }>>\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/index.ts:94\n\n----------------------------------------\n\n\n# afterHandle\n\n▸ afterHandle<Route>(handler): default<Instance>\n\n# Type parameters\n\nNAME    TYPE\nRoute   extends TypedRoute = TypedRoute\n\n# Parameters\n\nNAME      TYPE\nhandler   AfterRequestHandler<Route, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:182\n\n----------------------------------------\n\n\n# connect\n\n▸ connect<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:391\n\n----------------------------------------\n\n\n# decorate\n\n▸ decorate<Name, Callback, NewInstance>(name, value): NewInstance\n\n# Type parameters\n\nNAME          TYPE\nName          extends string\nCallback      extends Function = () => unknown\nNewInstance   default<{ request: Instance[\"request\"] & { [key in string]:\n              Callback } ; store: Instance[\"store\"] }>\n\n# Parameters\n\nNAME    TYPE\nname    Name\nvalue   Callback\n\n# Returns\n\nNewInstance\n\n# Defined in\n\nsrc/index.ts:438\n\n----------------------------------------\n\n\n# delete\n\n▸ delete<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:339\n\n----------------------------------------\n\n\n# get\n\n▸ get<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:293\n\n----------------------------------------\n\n\n# getSchema\n\n▸ Private getSchema(schema): undefined | { $schema: \"http://json-schema.org/draft-07/schema#\" } & { default?: any ; description?: string }\n\n# Parameters\n\nNAME     TYPE\nschema   undefined | ZodType<any, ZodTypeDef, any>\n\n# Returns\n\nundefined | { $schema: \"http://json-schema.org/draft-07/schema#\" } & { default?: any ; description?: string }\n\n# Defined in\n\nsrc/index.ts:82\n\n----------------------------------------\n\n\n# getSchemaValidator\n\n▸ Private getSchemaValidator(schema): undefined | ValidateFunction\n\n# Parameters\n\nNAME     TYPE\nschema   undefined | ZodType<any, ZodTypeDef, any>\n\n# Returns\n\nundefined | ValidateFunction\n\n# Defined in\n\nsrc/index.ts:88\n\n----------------------------------------\n\n\n# group\n\n▸ group(prefix, run): default<Instance>\n\n# Parameters\n\nNAME     TYPE\nprefix   string\nrun      (group: default<Instance>) => void\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:245\n\n----------------------------------------\n\n\n# guard\n\n▸ guard(hook, run): default<Instance>\n\n# Parameters\n\nNAME   TYPE\nhook   RegisterHook<{}, Instance>\nrun    (group: default<Instance>) => void\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:265\n\n----------------------------------------\n\n\n# handle\n\n▸ handle(request): Promise<Response>\n\n# Parameters\n\nNAME      TYPE\nrequest   Request\n\n# Returns\n\nPromise<Response>\n\n# Defined in\n\nsrc/index.ts:452\n\n----------------------------------------\n\n\n# handleError\n\n▸ Private handleError(err): Response\n\n# Parameters\n\nNAME   TYPE\nerr    Error\n\n# Returns\n\nResponse\n\n# Defined in\n\nsrc/index.ts:567\n\n----------------------------------------\n\n\n# head\n\n▸ head<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:365\n\n----------------------------------------\n\n\n# listen\n\n▸ listen(options): default<Instance>\n\n# Parameters\n\nNAME      TYPE\noptions   number | Omit<Serve<undefined>, \"fetch\">\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:600\n\n----------------------------------------\n\n\n# method\n\n▸ method<Schema, Path>(method, path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\nmethod    HTTPMethod\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:404\n\n----------------------------------------\n\n\n# on\n\n▸ on<Event>(type, handler): default<Instance>\n\n# Type parameters\n\nNAME    TYPE\nEvent   extends LifeCycleEvent = LifeCycleEvent\n\n# Parameters\n\nNAME      TYPE\ntype      Event\nhandler   LifeCycle<Instance>[Event]\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:202\n\n----------------------------------------\n\n\n# onBeforeHandle\n\n▸ onBeforeHandle<Route>(handler): default<Instance>\n\n# Type parameters\n\nNAME    TYPE\nRoute   extends TypedRoute = TypedRoute\n\n# Parameters\n\nNAME      TYPE\nhandler   Handler<Route, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:174\n\n----------------------------------------\n\n\n# onError\n\n▸ onError(errorHandler): default<Instance>\n\n# Parameters\n\nNAME           TYPE\nerrorHandler   ErrorHandler\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:190\n\n----------------------------------------\n\n\n# onParse\n\n▸ onParse(parser): default<Instance>\n\n# Parameters\n\nNAME     TYPE\nparser   BodyParser\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:160\n\n----------------------------------------\n\n\n# onRequest\n\n▸ onRequest(handler): default<Instance>\n\n# Parameters\n\nNAME      TYPE\nhandler   BeforeRequestHandler<Instance[\"store\"]>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:154\n\n----------------------------------------\n\n\n# onStart\n\n▸ onStart(handler): default<Instance>\n\n# Parameters\n\nNAME      TYPE\nhandler   VoidLifeCycle\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:148\n\n----------------------------------------\n\n\n# onStop\n\n▸ onStop(handler): default<Instance>\n\n# Parameters\n\nNAME      TYPE\nhandler   VoidLifeCycle\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:196\n\n----------------------------------------\n\n\n# onTransform\n\n▸ onTransform<Route>(handler): default<Instance>\n\n# Type parameters\n\nNAME    TYPE\nRoute   extends TypedRoute = TypedRoute\n\n# Parameters\n\nNAME      TYPE\nhandler   Handler<Route, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:166\n\n----------------------------------------\n\n\n# options\n\n▸ options<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:352\n\n----------------------------------------\n\n\n# patch\n\n▸ patch<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:326\n\n----------------------------------------\n\n\n# post\n\n▸ post<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:303\n\n----------------------------------------\n\n\n# put\n\n▸ put<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:316\n\n----------------------------------------\n\n\n# state\n\n▸ state<Key, Value, ReturnValue, NewInstance>(name, value): NewInstance\n\n# Type parameters\n\nNAME          TYPE\nKey           extends KWKey = keyof Instance[\"store\"]\nValue         Instance[\"store\"][keyof Instance[\"store\"]]\nReturnValue   Value extends () => Returned ? Returned extends\n              Promise<AsyncReturned> ? AsyncReturned : Returned : Value\nNewInstance   default<{ request: Instance[\"request\"] ; store:\n              Instance[\"store\"] & { [key in KWKey]: ReturnValue } }>\n\n# Parameters\n\nNAME    TYPE\nname    Key\nvalue   Value\n\n# Returns\n\nNewInstance\n\n# Defined in\n\nsrc/index.ts:418\n\n----------------------------------------\n\n\n# stop\n\n▸ stop(): Promise<void>\n\n# Returns\n\nPromise<void>\n\n# Defined in\n\nsrc/index.ts:622\n\n----------------------------------------\n\n\n# trace\n\n▸ trace<Schema, Path>(path, handler, hook?): default<Instance>\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ;\n         header: ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }, Schema> =\n         TypedSchema<{ body: ZodType<any, ZodTypeDef, any> ; header:\n         ZodType<any, ZodTypeDef, any> ; params: ZodType<any,\n         ZodTypeDef, any> ; query: ZodType<any, ZodTypeDef, any> ;\n         response: ZodType<any, ZodTypeDef, any> }>\nPath     extends string = string\n\n# Parameters\n\nNAME      TYPE\npath      Path\nhandler   LocalHandler<Schema, Instance, Path>\nhook?     LocalHook<Schema, Instance>\n\n# Returns\n\ndefault<Instance>\n\n# Defined in\n\nsrc/index.ts:378\n\n----------------------------------------\n\n\n# use\n\n▸ use<Config, T>(plugin, config?): T\n\n# Type parameters\n\nNAME     TYPE\nConfig   extends Record<string, unknown> = Record<string, unknown>\nT        extends default<any, T> = default<any>\n\n# Parameters\n\nNAME      TYPE\nplugin    (app: default<Instance>, config?: Config) => T\nconfig?   Config\n\n# Returns\n\nT\n\n# Defined in\n\nsrc/index.ts:281",
      "normalizedContent": "# class: default<instance>\n\n\n# type parameters\n\nname       type\ninstance   extends kingworldinstance = kingworldinstance\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * config\n * event\n * router\n * routes\n * server\n * store\n\n\n# methods\n\n * _addhandler\n * afterhandle\n * connect\n * decorate\n * delete\n * get\n * getschema\n * getschemavalidator\n * group\n * guard\n * handle\n * handleerror\n * head\n * listen\n * method\n * on\n * onbeforehandle\n * onerror\n * onparse\n * onrequest\n * onstart\n * onstop\n * ontransform\n * options\n * patch\n * post\n * put\n * state\n * stop\n * trace\n * use\n\n\n# constructors\n\n\n# constructor\n\n• new default<instance>(config?)\n\n# type parameters\n\nname       type\ninstance   extends kingworldinstance<{ request: record<kwkey, any> ;\n           store: record<kwkey, any> }, instance> = kingworldinstance<{\n           request: record<kwkey, any> ; store: record<kwkey, any> }>\n\n# parameters\n\nname     type\nconfig   partial<kingworldconfig>\n\n# defined in\n\nsrc/index.ts:73\n\n\n# properties\n\n\n# config\n\n• private config: kingworldconfig\n\n# defined in\n\nsrc/index.ts:69\n\n----------------------------------------\n\n\n# event\n\n• event: lifecyclestore<instance>\n\n# defined in\n\nsrc/index.ts:44\n\n----------------------------------------\n\n\n# router\n\n• private router: router\n\n# defined in\n\nsrc/index.ts:70\n\n----------------------------------------\n\n\n# routes\n\n• protected routes: internalroute<instance>[] = []\n\n# defined in\n\nsrc/index.ts:71\n\n----------------------------------------\n\n\n# server\n\n• server: null | server = null\n\n# defined in\n\nsrc/index.ts:67\n\n----------------------------------------\n\n\n# store\n\n• store: instance[\"store\"]\n\n# defined in\n\nsrc/index.ts:41\n\n\n# methods\n\n\n# _addhandler\n\n▸ private _addhandler<schema, path>(method, path, handler, hook?): void\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\nmethod    httpmethod\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<any, kingworldinstance<{ request: record<kwkey,\n          any> ; store: record<kwkey, any> }>>\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/index.ts:94\n\n----------------------------------------\n\n\n# afterhandle\n\n▸ afterhandle<route>(handler): default<instance>\n\n# type parameters\n\nname    type\nroute   extends typedroute = typedroute\n\n# parameters\n\nname      type\nhandler   afterrequesthandler<route, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:182\n\n----------------------------------------\n\n\n# connect\n\n▸ connect<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:391\n\n----------------------------------------\n\n\n# decorate\n\n▸ decorate<name, callback, newinstance>(name, value): newinstance\n\n# type parameters\n\nname          type\nname          extends string\ncallback      extends function = () => unknown\nnewinstance   default<{ request: instance[\"request\"] & { [key in string]:\n              callback } ; store: instance[\"store\"] }>\n\n# parameters\n\nname    type\nname    name\nvalue   callback\n\n# returns\n\nnewinstance\n\n# defined in\n\nsrc/index.ts:438\n\n----------------------------------------\n\n\n# delete\n\n▸ delete<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:339\n\n----------------------------------------\n\n\n# get\n\n▸ get<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:293\n\n----------------------------------------\n\n\n# getschema\n\n▸ private getschema(schema): undefined | { $schema: \"http://json-schema.org/draft-07/schema#\" } & { default?: any ; description?: string }\n\n# parameters\n\nname     type\nschema   undefined | zodtype<any, zodtypedef, any>\n\n# returns\n\nundefined | { $schema: \"http://json-schema.org/draft-07/schema#\" } & { default?: any ; description?: string }\n\n# defined in\n\nsrc/index.ts:82\n\n----------------------------------------\n\n\n# getschemavalidator\n\n▸ private getschemavalidator(schema): undefined | validatefunction\n\n# parameters\n\nname     type\nschema   undefined | zodtype<any, zodtypedef, any>\n\n# returns\n\nundefined | validatefunction\n\n# defined in\n\nsrc/index.ts:88\n\n----------------------------------------\n\n\n# group\n\n▸ group(prefix, run): default<instance>\n\n# parameters\n\nname     type\nprefix   string\nrun      (group: default<instance>) => void\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:245\n\n----------------------------------------\n\n\n# guard\n\n▸ guard(hook, run): default<instance>\n\n# parameters\n\nname   type\nhook   registerhook<{}, instance>\nrun    (group: default<instance>) => void\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:265\n\n----------------------------------------\n\n\n# handle\n\n▸ handle(request): promise<response>\n\n# parameters\n\nname      type\nrequest   request\n\n# returns\n\npromise<response>\n\n# defined in\n\nsrc/index.ts:452\n\n----------------------------------------\n\n\n# handleerror\n\n▸ private handleerror(err): response\n\n# parameters\n\nname   type\nerr    error\n\n# returns\n\nresponse\n\n# defined in\n\nsrc/index.ts:567\n\n----------------------------------------\n\n\n# head\n\n▸ head<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:365\n\n----------------------------------------\n\n\n# listen\n\n▸ listen(options): default<instance>\n\n# parameters\n\nname      type\noptions   number | omit<serve<undefined>, \"fetch\">\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:600\n\n----------------------------------------\n\n\n# method\n\n▸ method<schema, path>(method, path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\nmethod    httpmethod\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:404\n\n----------------------------------------\n\n\n# on\n\n▸ on<event>(type, handler): default<instance>\n\n# type parameters\n\nname    type\nevent   extends lifecycleevent = lifecycleevent\n\n# parameters\n\nname      type\ntype      event\nhandler   lifecycle<instance>[event]\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:202\n\n----------------------------------------\n\n\n# onbeforehandle\n\n▸ onbeforehandle<route>(handler): default<instance>\n\n# type parameters\n\nname    type\nroute   extends typedroute = typedroute\n\n# parameters\n\nname      type\nhandler   handler<route, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:174\n\n----------------------------------------\n\n\n# onerror\n\n▸ onerror(errorhandler): default<instance>\n\n# parameters\n\nname           type\nerrorhandler   errorhandler\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:190\n\n----------------------------------------\n\n\n# onparse\n\n▸ onparse(parser): default<instance>\n\n# parameters\n\nname     type\nparser   bodyparser\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:160\n\n----------------------------------------\n\n\n# onrequest\n\n▸ onrequest(handler): default<instance>\n\n# parameters\n\nname      type\nhandler   beforerequesthandler<instance[\"store\"]>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:154\n\n----------------------------------------\n\n\n# onstart\n\n▸ onstart(handler): default<instance>\n\n# parameters\n\nname      type\nhandler   voidlifecycle\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:148\n\n----------------------------------------\n\n\n# onstop\n\n▸ onstop(handler): default<instance>\n\n# parameters\n\nname      type\nhandler   voidlifecycle\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:196\n\n----------------------------------------\n\n\n# ontransform\n\n▸ ontransform<route>(handler): default<instance>\n\n# type parameters\n\nname    type\nroute   extends typedroute = typedroute\n\n# parameters\n\nname      type\nhandler   handler<route, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:166\n\n----------------------------------------\n\n\n# options\n\n▸ options<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:352\n\n----------------------------------------\n\n\n# patch\n\n▸ patch<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:326\n\n----------------------------------------\n\n\n# post\n\n▸ post<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:303\n\n----------------------------------------\n\n\n# put\n\n▸ put<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:316\n\n----------------------------------------\n\n\n# state\n\n▸ state<key, value, returnvalue, newinstance>(name, value): newinstance\n\n# type parameters\n\nname          type\nkey           extends kwkey = keyof instance[\"store\"]\nvalue         instance[\"store\"][keyof instance[\"store\"]]\nreturnvalue   value extends () => returned ? returned extends\n              promise<asyncreturned> ? asyncreturned : returned : value\nnewinstance   default<{ request: instance[\"request\"] ; store:\n              instance[\"store\"] & { [key in kwkey]: returnvalue } }>\n\n# parameters\n\nname    type\nname    key\nvalue   value\n\n# returns\n\nnewinstance\n\n# defined in\n\nsrc/index.ts:418\n\n----------------------------------------\n\n\n# stop\n\n▸ stop(): promise<void>\n\n# returns\n\npromise<void>\n\n# defined in\n\nsrc/index.ts:622\n\n----------------------------------------\n\n\n# trace\n\n▸ trace<schema, path>(path, handler, hook?): default<instance>\n\n# type parameters\n\nname     type\nschema   extends typedschema<{ body: zodtype<any, zodtypedef, any> ;\n         header: zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }, schema> =\n         typedschema<{ body: zodtype<any, zodtypedef, any> ; header:\n         zodtype<any, zodtypedef, any> ; params: zodtype<any,\n         zodtypedef, any> ; query: zodtype<any, zodtypedef, any> ;\n         response: zodtype<any, zodtypedef, any> }>\npath     extends string = string\n\n# parameters\n\nname      type\npath      path\nhandler   localhandler<schema, instance, path>\nhook?     localhook<schema, instance>\n\n# returns\n\ndefault<instance>\n\n# defined in\n\nsrc/index.ts:378\n\n----------------------------------------\n\n\n# use\n\n▸ use<config, t>(plugin, config?): t\n\n# type parameters\n\nname     type\nconfig   extends record<string, unknown> = record<string, unknown>\nt        extends default<any, t> = default<any>\n\n# parameters\n\nname      type\nplugin    (app: default<instance>, config?: config) => t\nconfig?   config\n\n# returns\n\nt\n\n# defined in\n\nsrc/index.ts:281",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Interface: Hook",
      "frontmatter": {},
      "regularPath": "/api/interfaces/Hook.html",
      "relativePath": "api/interfaces/Hook.md",
      "key": "v-8a51b836",
      "path": "/api/interfaces/Hook.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 32
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 126
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 148
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 148
        },
        {
          "level": 3,
          "title": "afterHandle",
          "slug": "afterhandle",
          "normalizedTitle": "afterhandle",
          "charIndex": 163
        },
        {
          "level": 3,
          "title": "beforeHandle",
          "slug": "beforehandle",
          "normalizedTitle": "beforehandle",
          "charIndex": 178
        },
        {
          "level": 3,
          "title": "error",
          "slug": "error",
          "normalizedTitle": "error",
          "charIndex": 194
        },
        {
          "level": 3,
          "title": "transform",
          "slug": "transform",
          "normalizedTitle": "transform",
          "charIndex": 203
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties afterHandle beforeHandle error transform",
      "content": "# Interface: Hook<Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends KingWorldInstance = KingWorldInstance\n\n\n# Table of contents\n\n\n# Properties\n\n * afterHandle\n * beforeHandle\n * error\n * transform\n\n\n# Properties\n\n\n# afterHandle\n\n• afterHandle: AfterRequestHandler<any, Instance>[]\n\n# Defined in\n\nsrc/types.ts:87\n\n----------------------------------------\n\n\n# beforeHandle\n\n• beforeHandle: Handler<any, Instance>[]\n\n# Defined in\n\nsrc/types.ts:86\n\n----------------------------------------\n\n\n# error\n\n• error: ErrorHandler[]\n\n# Defined in\n\nsrc/types.ts:88\n\n----------------------------------------\n\n\n# transform\n\n• transform: Handler<any, Instance>[]\n\n# Defined in\n\nsrc/types.ts:85",
      "normalizedContent": "# interface: hook<instance>\n\n\n# type parameters\n\nname       type\ninstance   extends kingworldinstance = kingworldinstance\n\n\n# table of contents\n\n\n# properties\n\n * afterhandle\n * beforehandle\n * error\n * transform\n\n\n# properties\n\n\n# afterhandle\n\n• afterhandle: afterrequesthandler<any, instance>[]\n\n# defined in\n\nsrc/types.ts:87\n\n----------------------------------------\n\n\n# beforehandle\n\n• beforehandle: handler<any, instance>[]\n\n# defined in\n\nsrc/types.ts:86\n\n----------------------------------------\n\n\n# error\n\n• error: errorhandler[]\n\n# defined in\n\nsrc/types.ts:88\n\n----------------------------------------\n\n\n# transform\n\n• transform: handler<any, instance>[]\n\n# defined in\n\nsrc/types.ts:85",
      "charsets": {}
    },
    {
      "title": "Interface: InternalRoute",
      "frontmatter": {},
      "regularPath": "/api/interfaces/InternalRoute.html",
      "relativePath": "api/interfaces/InternalRoute.md",
      "key": "v-035988ce",
      "path": "/api/interfaces/InternalRoute.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 41
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 115
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 137
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 137
        },
        {
          "level": 3,
          "title": "handler",
          "slug": "handler",
          "normalizedTitle": "handler",
          "charIndex": 152
        },
        {
          "level": 3,
          "title": "hooks",
          "slug": "hooks",
          "normalizedTitle": "hooks",
          "charIndex": 163
        },
        {
          "level": 3,
          "title": "method",
          "slug": "method",
          "normalizedTitle": "method",
          "charIndex": 172
        },
        {
          "level": 3,
          "title": "path",
          "slug": "path",
          "normalizedTitle": "path",
          "charIndex": 182
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties handler hooks method path",
      "content": "# Interface: InternalRoute<Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends KingWorldInstance\n\n\n# Table of contents\n\n\n# Properties\n\n * handler\n * hooks\n * method\n * path\n\n\n# Properties\n\n\n# handler\n\n• handler: Handler<any, Instance>\n\n# Defined in\n\nsrc/types.ts:221\n\n----------------------------------------\n\n\n# hooks\n\n• hooks: Hook<Instance>\n\n# Defined in\n\nsrc/types.ts:222\n\n----------------------------------------\n\n\n# method\n\n• method: HTTPMethod\n\n# Defined in\n\nsrc/types.ts:219\n\n----------------------------------------\n\n\n# path\n\n• path: string\n\n# Defined in\n\nsrc/types.ts:220",
      "normalizedContent": "# interface: internalroute<instance>\n\n\n# type parameters\n\nname       type\ninstance   extends kingworldinstance\n\n\n# table of contents\n\n\n# properties\n\n * handler\n * hooks\n * method\n * path\n\n\n# properties\n\n\n# handler\n\n• handler: handler<any, instance>\n\n# defined in\n\nsrc/types.ts:221\n\n----------------------------------------\n\n\n# hooks\n\n• hooks: hook<instance>\n\n# defined in\n\nsrc/types.ts:222\n\n----------------------------------------\n\n\n# method\n\n• method: httpmethod\n\n# defined in\n\nsrc/types.ts:219\n\n----------------------------------------\n\n\n# path\n\n• path: string\n\n# defined in\n\nsrc/types.ts:220",
      "charsets": {}
    },
    {
      "title": "Interface: KingWorldConfig",
      "frontmatter": {},
      "regularPath": "/api/interfaces/KingWorldConfig.html",
      "relativePath": "api/interfaces/KingWorldConfig.md",
      "key": "v-49a5fc12",
      "path": "/api/interfaces/KingWorldConfig.html",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 33
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 55
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 55
        },
        {
          "level": 3,
          "title": "ajv",
          "slug": "ajv",
          "normalizedTitle": "ajv",
          "charIndex": 70
        },
        {
          "level": 3,
          "title": "bodyLimit",
          "slug": "bodylimit",
          "normalizedTitle": "bodylimit",
          "charIndex": 77
        },
        {
          "level": 3,
          "title": "strictPath",
          "slug": "strictpath",
          "normalizedTitle": "strictpath",
          "charIndex": 90
        }
      ],
      "headersStr": "Table of contents Properties Properties ajv bodyLimit strictPath",
      "content": "# Interface: KingWorldConfig\n\n\n# Table of contents\n\n\n# Properties\n\n * ajv\n * bodyLimit\n * strictPath\n\n\n# Properties\n\n\n# ajv\n\n• ajv: Ajv\n\nCustom ajv instance\n\n# Defined in\n\nsrc/types.ts:208\n\n----------------------------------------\n\n\n# bodyLimit\n\n• bodyLimit: number\n\nDefines the maximum payload, in bytes, the server is allowed to accept.\n\nDefault\n\n1048576 (1MB)\n\n# Defined in\n\nsrc/types.ts:196\n\n----------------------------------------\n\n\n# strictPath\n\n• strictPath: boolean\n\nIf set to true, path will NOT try to map trailing slash with none.\n\nFor example: /group/ will not be map to /group or vice versa.\n\nDefault\n\nfalse\n\n# Defined in\n\nsrc/types.ts:204",
      "normalizedContent": "# interface: kingworldconfig\n\n\n# table of contents\n\n\n# properties\n\n * ajv\n * bodylimit\n * strictpath\n\n\n# properties\n\n\n# ajv\n\n• ajv: ajv\n\ncustom ajv instance\n\n# defined in\n\nsrc/types.ts:208\n\n----------------------------------------\n\n\n# bodylimit\n\n• bodylimit: number\n\ndefines the maximum payload, in bytes, the server is allowed to accept.\n\ndefault\n\n1048576 (1mb)\n\n# defined in\n\nsrc/types.ts:196\n\n----------------------------------------\n\n\n# strictpath\n\n• strictpath: boolean\n\nif set to true, path will not try to map trailing slash with none.\n\nfor example: /group/ will not be map to /group or vice versa.\n\ndefault\n\nfalse\n\n# defined in\n\nsrc/types.ts:204",
      "charsets": {}
    },
    {
      "title": "Interface: KingWorldInstance",
      "frontmatter": {},
      "regularPath": "/api/interfaces/KingWorldInstance.html",
      "relativePath": "api/interfaces/KingWorldInstance.md",
      "key": "v-8fe4425e",
      "path": "/api/interfaces/KingWorldInstance.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 45
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 181
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 203
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 203
        },
        {
          "level": 3,
          "title": "request",
          "slug": "request",
          "normalizedTitle": "request",
          "charIndex": 108
        },
        {
          "level": 3,
          "title": "store",
          "slug": "store",
          "normalizedTitle": "store",
          "charIndex": 138
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties request store",
      "content": "# Interface: KingWorldInstance<Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends Object = { request: Record<KWKey, any> ; store:\n           Record<KWKey, any> }\n\n\n# Table of contents\n\n\n# Properties\n\n * request\n * store\n\n\n# Properties\n\n\n# request\n\n• request: Instance[\"request\"]\n\n# Defined in\n\nsrc/types.ts:20\n\n----------------------------------------\n\n\n# store\n\n• store: Instance[\"store\"]\n\n# Defined in\n\nsrc/types.ts:21",
      "normalizedContent": "# interface: kingworldinstance<instance>\n\n\n# type parameters\n\nname       type\ninstance   extends object = { request: record<kwkey, any> ; store:\n           record<kwkey, any> }\n\n\n# table of contents\n\n\n# properties\n\n * request\n * store\n\n\n# properties\n\n\n# request\n\n• request: instance[\"request\"]\n\n# defined in\n\nsrc/types.ts:20\n\n----------------------------------------\n\n\n# store\n\n• store: instance[\"store\"]\n\n# defined in\n\nsrc/types.ts:21",
      "charsets": {}
    },
    {
      "title": "Interface: LifeCycle",
      "frontmatter": {},
      "regularPath": "/api/interfaces/LifeCycle.html",
      "relativePath": "api/interfaces/LifeCycle.md",
      "key": "v-3d367d9d",
      "path": "/api/interfaces/LifeCycle.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 37
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 131
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 153
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 153
        },
        {
          "level": 3,
          "title": "afterHandle",
          "slug": "afterhandle",
          "normalizedTitle": "afterhandle",
          "charIndex": 168
        },
        {
          "level": 3,
          "title": "beforeHandle",
          "slug": "beforehandle",
          "normalizedTitle": "beforehandle",
          "charIndex": 183
        },
        {
          "level": 3,
          "title": "error",
          "slug": "error",
          "normalizedTitle": "error",
          "charIndex": 199
        },
        {
          "level": 3,
          "title": "parse",
          "slug": "parse",
          "normalizedTitle": "parse",
          "charIndex": 208
        },
        {
          "level": 3,
          "title": "request",
          "slug": "request",
          "normalizedTitle": "request",
          "charIndex": 217
        },
        {
          "level": 3,
          "title": "start",
          "slug": "start",
          "normalizedTitle": "start",
          "charIndex": 228
        },
        {
          "level": 3,
          "title": "stop",
          "slug": "stop",
          "normalizedTitle": "stop",
          "charIndex": 237
        },
        {
          "level": 3,
          "title": "transform",
          "slug": "transform",
          "normalizedTitle": "transform",
          "charIndex": 245
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties afterHandle beforeHandle error parse request start stop transform",
      "content": "# Interface: LifeCycle<Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nInstance   extends KingWorldInstance = KingWorldInstance\n\n\n# Table of contents\n\n\n# Properties\n\n * afterHandle\n * beforeHandle\n * error\n * parse\n * request\n * start\n * stop\n * transform\n\n\n# Properties\n\n\n# afterHandle\n\n• afterHandle: AfterRequestHandler<any, Instance>\n\n# Defined in\n\nsrc/types.ts:53\n\n----------------------------------------\n\n\n# beforeHandle\n\n• beforeHandle: Handler<any, Instance>\n\n# Defined in\n\nsrc/types.ts:52\n\n----------------------------------------\n\n\n# error\n\n• error: ErrorHandler\n\n# Defined in\n\nsrc/types.ts:54\n\n----------------------------------------\n\n\n# parse\n\n• parse: BodyParser\n\n# Defined in\n\nsrc/types.ts:50\n\n----------------------------------------\n\n\n# request\n\n• request: BeforeRequestHandler<{}>\n\n# Defined in\n\nsrc/types.ts:49\n\n----------------------------------------\n\n\n# start\n\n• start: VoidLifeCycle\n\n# Defined in\n\nsrc/types.ts:48\n\n----------------------------------------\n\n\n# stop\n\n• stop: VoidLifeCycle\n\n# Defined in\n\nsrc/types.ts:55\n\n----------------------------------------\n\n\n# transform\n\n• transform: Handler<any, Instance>\n\n# Defined in\n\nsrc/types.ts:51",
      "normalizedContent": "# interface: lifecycle<instance>\n\n\n# type parameters\n\nname       type\ninstance   extends kingworldinstance = kingworldinstance\n\n\n# table of contents\n\n\n# properties\n\n * afterhandle\n * beforehandle\n * error\n * parse\n * request\n * start\n * stop\n * transform\n\n\n# properties\n\n\n# afterhandle\n\n• afterhandle: afterrequesthandler<any, instance>\n\n# defined in\n\nsrc/types.ts:53\n\n----------------------------------------\n\n\n# beforehandle\n\n• beforehandle: handler<any, instance>\n\n# defined in\n\nsrc/types.ts:52\n\n----------------------------------------\n\n\n# error\n\n• error: errorhandler\n\n# defined in\n\nsrc/types.ts:54\n\n----------------------------------------\n\n\n# parse\n\n• parse: bodyparser\n\n# defined in\n\nsrc/types.ts:50\n\n----------------------------------------\n\n\n# request\n\n• request: beforerequesthandler<{}>\n\n# defined in\n\nsrc/types.ts:49\n\n----------------------------------------\n\n\n# start\n\n• start: voidlifecycle\n\n# defined in\n\nsrc/types.ts:48\n\n----------------------------------------\n\n\n# stop\n\n• stop: voidlifecycle\n\n# defined in\n\nsrc/types.ts:55\n\n----------------------------------------\n\n\n# transform\n\n• transform: handler<any, instance>\n\n# defined in\n\nsrc/types.ts:51",
      "charsets": {}
    },
    {
      "title": "Interface: LocalHook",
      "frontmatter": {},
      "regularPath": "/api/interfaces/LocalHook.html",
      "relativePath": "api/interfaces/LocalHook.md",
      "key": "v-88f1de56",
      "path": "/api/interfaces/LocalHook.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 45
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 170
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 192
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 192
        },
        {
          "level": 3,
          "title": "afterHandle",
          "slug": "afterhandle",
          "normalizedTitle": "afterhandle",
          "charIndex": 207
        },
        {
          "level": 3,
          "title": "beforeHandle",
          "slug": "beforehandle",
          "normalizedTitle": "beforehandle",
          "charIndex": 222
        },
        {
          "level": 3,
          "title": "schema",
          "slug": "schema",
          "normalizedTitle": "schema",
          "charIndex": 238
        },
        {
          "level": 3,
          "title": "transform",
          "slug": "transform",
          "normalizedTitle": "transform",
          "charIndex": 248
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties afterHandle beforeHandle schema transform",
      "content": "# Interface: LocalHook<Schema, Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nSchema     extends TypedSchema\nInstance   extends KingWorldInstance = KingWorldInstance\n\n\n# Table of contents\n\n\n# Properties\n\n * afterHandle\n * beforeHandle\n * schema\n * transform\n\n\n# Properties\n\n\n# afterHandle\n\n• Optional afterHandle: WithArray<HookHandler<Schema, Instance>>\n\n# Defined in\n\nsrc/types.ts:161\n\n----------------------------------------\n\n\n# beforeHandle\n\n• Optional beforeHandle: WithArray<HookHandler<Schema, Instance>>\n\n# Defined in\n\nsrc/types.ts:160\n\n----------------------------------------\n\n\n# schema\n\n• Optional schema: Schema\n\n# Defined in\n\nsrc/types.ts:158\n\n----------------------------------------\n\n\n# transform\n\n• Optional transform: WithArray<HookHandler<Schema, Instance>>\n\n# Defined in\n\nsrc/types.ts:159",
      "normalizedContent": "# interface: localhook<schema, instance>\n\n\n# type parameters\n\nname       type\nschema     extends typedschema\ninstance   extends kingworldinstance = kingworldinstance\n\n\n# table of contents\n\n\n# properties\n\n * afterhandle\n * beforehandle\n * schema\n * transform\n\n\n# properties\n\n\n# afterhandle\n\n• optional afterhandle: witharray<hookhandler<schema, instance>>\n\n# defined in\n\nsrc/types.ts:161\n\n----------------------------------------\n\n\n# beforehandle\n\n• optional beforehandle: witharray<hookhandler<schema, instance>>\n\n# defined in\n\nsrc/types.ts:160\n\n----------------------------------------\n\n\n# schema\n\n• optional schema: schema\n\n# defined in\n\nsrc/types.ts:158\n\n----------------------------------------\n\n\n# transform\n\n• optional transform: witharray<hookhandler<schema, instance>>\n\n# defined in\n\nsrc/types.ts:159",
      "charsets": {}
    },
    {
      "title": "Interface: RegisterHook",
      "frontmatter": {},
      "regularPath": "/api/interfaces/RegisterHook.html",
      "relativePath": "api/interfaces/RegisterHook.md",
      "key": "v-25048f45",
      "path": "/api/interfaces/RegisterHook.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 47
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 184
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 206
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 206
        },
        {
          "level": 3,
          "title": "afterHandle",
          "slug": "afterhandle",
          "normalizedTitle": "afterhandle",
          "charIndex": 221
        },
        {
          "level": 3,
          "title": "beforeHandle",
          "slug": "beforehandle",
          "normalizedTitle": "beforehandle",
          "charIndex": 236
        },
        {
          "level": 3,
          "title": "error",
          "slug": "error",
          "normalizedTitle": "error",
          "charIndex": 252
        },
        {
          "level": 3,
          "title": "transform",
          "slug": "transform",
          "normalizedTitle": "transform",
          "charIndex": 261
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties afterHandle beforeHandle error transform",
      "content": "# Interface: RegisterHook<Route, Instance>\n\n\n# Type parameters\n\nNAME       TYPE\nRoute      extends TypedRoute = TypedRoute\nInstance   extends KingWorldInstance = KingWorldInstance\n\n\n# Table of contents\n\n\n# Properties\n\n * afterHandle\n * beforeHandle\n * error\n * transform\n\n\n# Properties\n\n\n# afterHandle\n\n• afterHandle: WithArray<AfterRequestHandler<Route, Instance>>\n\n# Defined in\n\nsrc/types.ts:97\n\n----------------------------------------\n\n\n# beforeHandle\n\n• Optional beforeHandle: WithArray<Handler<Route, Instance>>\n\n# Defined in\n\nsrc/types.ts:96\n\n----------------------------------------\n\n\n# error\n\n• Optional error: ErrorHandler\n\n# Defined in\n\nsrc/types.ts:98\n\n----------------------------------------\n\n\n# transform\n\n• Optional transform: WithArray<Handler<Route, Instance>>\n\n# Defined in\n\nsrc/types.ts:95",
      "normalizedContent": "# interface: registerhook<route, instance>\n\n\n# type parameters\n\nname       type\nroute      extends typedroute = typedroute\ninstance   extends kingworldinstance = kingworldinstance\n\n\n# table of contents\n\n\n# properties\n\n * afterhandle\n * beforehandle\n * error\n * transform\n\n\n# properties\n\n\n# afterhandle\n\n• afterhandle: witharray<afterrequesthandler<route, instance>>\n\n# defined in\n\nsrc/types.ts:97\n\n----------------------------------------\n\n\n# beforehandle\n\n• optional beforehandle: witharray<handler<route, instance>>\n\n# defined in\n\nsrc/types.ts:96\n\n----------------------------------------\n\n\n# error\n\n• optional error: errorhandler\n\n# defined in\n\nsrc/types.ts:98\n\n----------------------------------------\n\n\n# transform\n\n• optional transform: witharray<handler<route, instance>>\n\n# defined in\n\nsrc/types.ts:95",
      "charsets": {}
    },
    {
      "title": "Interface: TypedRoute",
      "frontmatter": {},
      "regularPath": "/api/interfaces/TypedRoute.html",
      "relativePath": "api/interfaces/TypedRoute.md",
      "key": "v-6e764da5",
      "path": "/api/interfaces/TypedRoute.html",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 28
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 50
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 50
        },
        {
          "level": 3,
          "title": "body",
          "slug": "body",
          "normalizedTitle": "body",
          "charIndex": 65
        },
        {
          "level": 3,
          "title": "header",
          "slug": "header",
          "normalizedTitle": "header",
          "charIndex": 73
        },
        {
          "level": 3,
          "title": "params",
          "slug": "params",
          "normalizedTitle": "params",
          "charIndex": 83
        },
        {
          "level": 3,
          "title": "query",
          "slug": "query",
          "normalizedTitle": "query",
          "charIndex": 93
        },
        {
          "level": 3,
          "title": "response",
          "slug": "response",
          "normalizedTitle": "response",
          "charIndex": 102
        }
      ],
      "headersStr": "Table of contents Properties Properties body header params query response",
      "content": "# Interface: TypedRoute\n\n\n# Table of contents\n\n\n# Properties\n\n * body\n * header\n * params\n * query\n * response\n\n\n# Properties\n\n\n# body\n\n• Optional body: string | Record<string, any>\n\n# Defined in\n\nsrc/types.ts:177\n\n----------------------------------------\n\n\n# header\n\n• Optional header: Record<string, unknown>\n\n# Defined in\n\nsrc/types.ts:178\n\n----------------------------------------\n\n\n# params\n\n• Optional params: Object\n\n# Defined in\n\nsrc/types.ts:180\n\n----------------------------------------\n\n\n# query\n\n• Optional query: Record<string, string>\n\n# Defined in\n\nsrc/types.ts:179\n\n----------------------------------------\n\n\n# response\n\n• Optional response: unknown\n\n# Defined in\n\nsrc/types.ts:181",
      "normalizedContent": "# interface: typedroute\n\n\n# table of contents\n\n\n# properties\n\n * body\n * header\n * params\n * query\n * response\n\n\n# properties\n\n\n# body\n\n• optional body: string | record<string, any>\n\n# defined in\n\nsrc/types.ts:177\n\n----------------------------------------\n\n\n# header\n\n• optional header: record<string, unknown>\n\n# defined in\n\nsrc/types.ts:178\n\n----------------------------------------\n\n\n# params\n\n• optional params: object\n\n# defined in\n\nsrc/types.ts:180\n\n----------------------------------------\n\n\n# query\n\n• optional query: record<string, string>\n\n# defined in\n\nsrc/types.ts:179\n\n----------------------------------------\n\n\n# response\n\n• optional response: unknown\n\n# defined in\n\nsrc/types.ts:181",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Interface: TypedSchema",
      "frontmatter": {},
      "regularPath": "/api/interfaces/TypedSchema.html",
      "relativePath": "api/interfaces/TypedSchema.md",
      "key": "v-732cebdb",
      "path": "/api/interfaces/TypedSchema.html",
      "headers": [
        {
          "level": 2,
          "title": "Type parameters",
          "slug": "type-parameters",
          "normalizedTitle": "type parameters",
          "charIndex": 37
        },
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 208
        },
        {
          "level": 3,
          "title": "Properties",
          "slug": "properties",
          "normalizedTitle": "properties",
          "charIndex": 230
        },
        {
          "level": 2,
          "title": "Properties",
          "slug": "properties-2",
          "normalizedTitle": "properties",
          "charIndex": 230
        },
        {
          "level": 3,
          "title": "body",
          "slug": "body",
          "normalizedTitle": "body",
          "charIndex": 96
        },
        {
          "level": 3,
          "title": "header",
          "slug": "header",
          "normalizedTitle": "header",
          "charIndex": 114
        },
        {
          "level": 3,
          "title": "params",
          "slug": "params",
          "normalizedTitle": "params",
          "charIndex": 143
        },
        {
          "level": 3,
          "title": "query",
          "slug": "query",
          "normalizedTitle": "query",
          "charIndex": 163
        },
        {
          "level": 3,
          "title": "response",
          "slug": "response",
          "normalizedTitle": "response",
          "charIndex": 182
        }
      ],
      "headersStr": "Type parameters Table of contents Properties Properties body header params query response",
      "content": "# Interface: TypedSchema<Schema>\n\n\n# Type parameters\n\nNAME     TYPE\nSchema   extends Object = { body: ZodSchema ; header: ZodSchema ;\n         params: ZodSchema ; query: ZodSchema ; response: ZodSchema }\n\n\n# Table of contents\n\n\n# Properties\n\n * body\n * header\n * params\n * query\n * response\n\n\n# Properties\n\n\n# body\n\n• Optional body: Schema[\"body\"]\n\n# Defined in\n\nsrc/types.ts:116\n\n----------------------------------------\n\n\n# header\n\n• Optional header: Schema[\"header\"]\n\n# Defined in\n\nsrc/types.ts:117\n\n----------------------------------------\n\n\n# params\n\n• Optional params: Schema[\"params\"]\n\n# Defined in\n\nsrc/types.ts:119\n\n----------------------------------------\n\n\n# query\n\n• Optional query: Schema[\"query\"]\n\n# Defined in\n\nsrc/types.ts:118\n\n----------------------------------------\n\n\n# response\n\n• Optional response: Schema[\"response\"]\n\n# Defined in\n\nsrc/types.ts:120",
      "normalizedContent": "# interface: typedschema<schema>\n\n\n# type parameters\n\nname     type\nschema   extends object = { body: zodschema ; header: zodschema ;\n         params: zodschema ; query: zodschema ; response: zodschema }\n\n\n# table of contents\n\n\n# properties\n\n * body\n * header\n * params\n * query\n * response\n\n\n# properties\n\n\n# body\n\n• optional body: schema[\"body\"]\n\n# defined in\n\nsrc/types.ts:116\n\n----------------------------------------\n\n\n# header\n\n• optional header: schema[\"header\"]\n\n# defined in\n\nsrc/types.ts:117\n\n----------------------------------------\n\n\n# params\n\n• optional params: schema[\"params\"]\n\n# defined in\n\nsrc/types.ts:119\n\n----------------------------------------\n\n\n# query\n\n• optional query: schema[\"query\"]\n\n# defined in\n\nsrc/types.ts:118\n\n----------------------------------------\n\n\n# response\n\n• optional response: schema[\"response\"]\n\n# defined in\n\nsrc/types.ts:120",
      "charsets": {}
    },
    {
      "title": "kingworld",
      "frontmatter": {},
      "regularPath": "/api/modules.html",
      "relativePath": "api/modules.md",
      "key": "v-18920cc5",
      "path": "/api/modules.html",
      "headers": [
        {
          "level": 2,
          "title": "Table of contents",
          "slug": "table-of-contents",
          "normalizedTitle": "table of contents",
          "charIndex": 16
        },
        {
          "level": 3,
          "title": "Classes",
          "slug": "classes",
          "normalizedTitle": "classes",
          "charIndex": 38
        },
        {
          "level": 3,
          "title": "Interfaces",
          "slug": "interfaces",
          "normalizedTitle": "interfaces",
          "charIndex": 73
        },
        {
          "level": 3,
          "title": "Type Aliases",
          "slug": "type-aliases",
          "normalizedTitle": "type aliases",
          "charIndex": 225
        },
        {
          "level": 3,
          "title": "Variables",
          "slug": "variables",
          "normalizedTitle": "variables",
          "charIndex": 397
        },
        {
          "level": 2,
          "title": "Type Aliases",
          "slug": "type-aliases-2",
          "normalizedTitle": "type aliases",
          "charIndex": 225
        },
        {
          "level": 3,
          "title": "BeforeRequestHandler",
          "slug": "beforerequesthandler",
          "normalizedTitle": "beforerequesthandler",
          "charIndex": 242
        },
        {
          "level": 3,
          "title": "BodyParser",
          "slug": "bodyparser",
          "normalizedTitle": "bodyparser",
          "charIndex": 266
        },
        {
          "level": 3,
          "title": "ComposedHandler",
          "slug": "composedhandler",
          "normalizedTitle": "composedhandler",
          "charIndex": 280
        },
        {
          "level": 3,
          "title": "ErrorCode",
          "slug": "errorcode",
          "normalizedTitle": "errorcode",
          "charIndex": 299
        },
        {
          "level": 3,
          "title": "ErrorHandler",
          "slug": "errorhandler",
          "normalizedTitle": "errorhandler",
          "charIndex": 312
        },
        {
          "level": 3,
          "title": "HTTPMethod",
          "slug": "httpmethod",
          "normalizedTitle": "httpmethod",
          "charIndex": 328
        },
        {
          "level": 3,
          "title": "Handler",
          "slug": "handler",
          "normalizedTitle": "handler",
          "charIndex": 255
        },
        {
          "level": 3,
          "title": "KWKey",
          "slug": "kwkey",
          "normalizedTitle": "kwkey",
          "charIndex": 353
        },
        {
          "level": 3,
          "title": "LifeCycleEvent",
          "slug": "lifecycleevent",
          "normalizedTitle": "lifecycleevent",
          "charIndex": 362
        },
        {
          "level": 3,
          "title": "LocalHandler",
          "slug": "localhandler",
          "normalizedTitle": "localhandler",
          "charIndex": 380
        },
        {
          "level": 2,
          "title": "Variables",
          "slug": "variables-2",
          "normalizedTitle": "variables",
          "charIndex": 397
        },
        {
          "level": 3,
          "title": "SCHEMA",
          "slug": "schema",
          "normalizedTitle": "schema",
          "charIndex": 411
        }
      ],
      "headersStr": "Table of contents Classes Interfaces Type Aliases Variables Type Aliases BeforeRequestHandler BodyParser ComposedHandler ErrorCode ErrorHandler HTTPMethod Handler KWKey LifeCycleEvent LocalHandler Variables SCHEMA",
      "content": "# kingworld\n\n\n# Table of contents\n\n\n# Classes\n\n * Context\n * default\n\n\n# Interfaces\n\n * Hook\n * InternalRoute\n * KingWorldConfig\n * KingWorldInstance\n * LifeCycle\n * LocalHook\n * RegisterHook\n * TypedRoute\n * TypedSchema\n\n\n# Type Aliases\n\n * BeforeRequestHandler\n * BodyParser\n * ComposedHandler\n * ErrorCode\n * ErrorHandler\n * HTTPMethod\n * Handler\n * KWKey\n * LifeCycleEvent\n * LocalHandler\n\n\n# Variables\n\n * SCHEMA\n\n\n# Type Aliases\n\n\n# BeforeRequestHandler\n\nƬ BeforeRequestHandler<Store>: (request: Request, store: Store) => Response | Promise<Response>\n\n# Type parameters\n\nNAME    TYPE\nStore   extends Record<string, any> = {}\n\n# Type declaration\n\n▸ (request, store): Response | Promise<Response>\n\n# Parameters\n\nNAME      TYPE\nrequest   Request\nstore     Store\n\n# Returns\n\nResponse | Promise<Response>\n\n# Defined in\n\nsrc/types.ts:79\n\n----------------------------------------\n\n\n# BodyParser\n\nƬ BodyParser: (request: Request) => any | Promise<any>\n\n# Type declaration\n\n▸ (request): any | Promise<any>\n\n# Parameters\n\nNAME      TYPE\nrequest   Request\n\n# Returns\n\nany | Promise<any>\n\n# Defined in\n\nsrc/types.ts:43\n\n----------------------------------------\n\n\n# ComposedHandler\n\nƬ ComposedHandler: Object\n\n# Type declaration\n\nNAME        TYPE\nhandle      Handler<any, any>\nhooks       Hook<any>\nvalidator   SchemaValidator\n\n# Defined in\n\nsrc/types.ts:184\n\n----------------------------------------\n\n\n# ErrorCode\n\nƬ ErrorCode: \"NOT_FOUND\" | \"INTERNAL_SERVER_ERROR\" | \"BODY_LIMIT\" | \"UNKNOWN\"\n\n# Defined in\n\nsrc/types.ts:261\n\n----------------------------------------\n\n\n# ErrorHandler\n\nƬ ErrorHandler: (errorCode: KingWorldError) => void | Response\n\n# Type declaration\n\n▸ (errorCode): void | Response\n\n# Parameters\n\nNAME        TYPE\nerrorCode   KingWorldError\n\n# Returns\n\nvoid | Response\n\n# Defined in\n\nsrc/types.ts:271\n\n----------------------------------------\n\n\n# HTTPMethod\n\nƬ HTTPMethod: \"ACL\" | \"BIND\" | \"CHECKOUT\" | \"CONNECT\" | \"COPY\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"LINK\" | \"LOCK\" | \"M-SEARCH\" | \"MERGE\" | \"MKACTIVITY\" | \"MKCALENDAR\" | \"MKCOL\" | \"MOVE\" | \"NOTIFY\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PROPFIND\" | \"PROPPATCH\" | \"PURGE\" | \"PUT\" | \"REBIND\" | \"REPORT\" | \"SEARCH\" | \"SOURCE\" | \"SUBSCRIBE\" | \"TRACE\" | \"UNBIND\" | \"UNLINK\" | \"UNLOCK\" | \"UNSUBSCRIBE\"\n\n# Defined in\n\nsrc/types.ts:225\n\n----------------------------------------\n\n\n# Handler\n\nƬ Handler<Route, Instance>: (context: Context<Route, Instance[\"store\"]> & Instance[\"request\"]) => Route[\"response\"] | Promise<Route[\"response\"]> | Response\n\n# Type parameters\n\nNAME       TYPE\nRoute      extends TypedRoute = TypedRoute\nInstance   extends KingWorldInstance = KingWorldInstance\n\n# Type declaration\n\n▸ (context): Route[\"response\"] | Promise<Route[\"response\"]> | Response\n\n# Parameters\n\nNAME      TYPE\ncontext   Context<Route, Instance[\"store\"]> & Instance[\"request\"]\n\n# Returns\n\nRoute[\"response\"] | Promise<Route[\"response\"]> | Response\n\n# Defined in\n\nsrc/types.ts:24\n\n----------------------------------------\n\n\n# KWKey\n\nƬ KWKey: string | number | symbol\n\n# Defined in\n\nsrc/types.ts:8\n\n----------------------------------------\n\n\n# LifeCycleEvent\n\nƬ LifeCycleEvent: \"start\" | \"request\" | \"parse\" | \"transform\" | \"beforeHandle\" | \"afterHandle\" | \"error\" | \"stop\"\n\n# Defined in\n\nsrc/types.ts:31\n\n----------------------------------------\n\n\n# LocalHandler\n\nƬ LocalHandler<Schema, Instance, Path>: Handler<Schema[\"params\"] extends NonNullable<Schema[\"params\"]> ? TypedSchemaToRoute<Schema> : Omit<TypedSchemaToRoute<Schema>, \"params\"> & { params: Record<ExtractKWPath<Path>, string> }, Instance>\n\n# Type parameters\n\nNAME       TYPE\nSchema     extends TypedSchema = TypedSchema\nInstance   extends KingWorldInstance = KingWorldInstance\nPath       extends string = string\n\n# Defined in\n\nsrc/types.ts:164\n\n\n# Variables\n\n\n# SCHEMA\n\n• Const SCHEMA: unique symbol\n\n# Defined in\n\nsrc/utils.ts:8",
      "normalizedContent": "# kingworld\n\n\n# table of contents\n\n\n# classes\n\n * context\n * default\n\n\n# interfaces\n\n * hook\n * internalroute\n * kingworldconfig\n * kingworldinstance\n * lifecycle\n * localhook\n * registerhook\n * typedroute\n * typedschema\n\n\n# type aliases\n\n * beforerequesthandler\n * bodyparser\n * composedhandler\n * errorcode\n * errorhandler\n * httpmethod\n * handler\n * kwkey\n * lifecycleevent\n * localhandler\n\n\n# variables\n\n * schema\n\n\n# type aliases\n\n\n# beforerequesthandler\n\nƭ beforerequesthandler<store>: (request: request, store: store) => response | promise<response>\n\n# type parameters\n\nname    type\nstore   extends record<string, any> = {}\n\n# type declaration\n\n▸ (request, store): response | promise<response>\n\n# parameters\n\nname      type\nrequest   request\nstore     store\n\n# returns\n\nresponse | promise<response>\n\n# defined in\n\nsrc/types.ts:79\n\n----------------------------------------\n\n\n# bodyparser\n\nƭ bodyparser: (request: request) => any | promise<any>\n\n# type declaration\n\n▸ (request): any | promise<any>\n\n# parameters\n\nname      type\nrequest   request\n\n# returns\n\nany | promise<any>\n\n# defined in\n\nsrc/types.ts:43\n\n----------------------------------------\n\n\n# composedhandler\n\nƭ composedhandler: object\n\n# type declaration\n\nname        type\nhandle      handler<any, any>\nhooks       hook<any>\nvalidator   schemavalidator\n\n# defined in\n\nsrc/types.ts:184\n\n----------------------------------------\n\n\n# errorcode\n\nƭ errorcode: \"not_found\" | \"internal_server_error\" | \"body_limit\" | \"unknown\"\n\n# defined in\n\nsrc/types.ts:261\n\n----------------------------------------\n\n\n# errorhandler\n\nƭ errorhandler: (errorcode: kingworlderror) => void | response\n\n# type declaration\n\n▸ (errorcode): void | response\n\n# parameters\n\nname        type\nerrorcode   kingworlderror\n\n# returns\n\nvoid | response\n\n# defined in\n\nsrc/types.ts:271\n\n----------------------------------------\n\n\n# httpmethod\n\nƭ httpmethod: \"acl\" | \"bind\" | \"checkout\" | \"connect\" | \"copy\" | \"delete\" | \"get\" | \"head\" | \"link\" | \"lock\" | \"m-search\" | \"merge\" | \"mkactivity\" | \"mkcalendar\" | \"mkcol\" | \"move\" | \"notify\" | \"options\" | \"patch\" | \"post\" | \"propfind\" | \"proppatch\" | \"purge\" | \"put\" | \"rebind\" | \"report\" | \"search\" | \"source\" | \"subscribe\" | \"trace\" | \"unbind\" | \"unlink\" | \"unlock\" | \"unsubscribe\"\n\n# defined in\n\nsrc/types.ts:225\n\n----------------------------------------\n\n\n# handler\n\nƭ handler<route, instance>: (context: context<route, instance[\"store\"]> & instance[\"request\"]) => route[\"response\"] | promise<route[\"response\"]> | response\n\n# type parameters\n\nname       type\nroute      extends typedroute = typedroute\ninstance   extends kingworldinstance = kingworldinstance\n\n# type declaration\n\n▸ (context): route[\"response\"] | promise<route[\"response\"]> | response\n\n# parameters\n\nname      type\ncontext   context<route, instance[\"store\"]> & instance[\"request\"]\n\n# returns\n\nroute[\"response\"] | promise<route[\"response\"]> | response\n\n# defined in\n\nsrc/types.ts:24\n\n----------------------------------------\n\n\n# kwkey\n\nƭ kwkey: string | number | symbol\n\n# defined in\n\nsrc/types.ts:8\n\n----------------------------------------\n\n\n# lifecycleevent\n\nƭ lifecycleevent: \"start\" | \"request\" | \"parse\" | \"transform\" | \"beforehandle\" | \"afterhandle\" | \"error\" | \"stop\"\n\n# defined in\n\nsrc/types.ts:31\n\n----------------------------------------\n\n\n# localhandler\n\nƭ localhandler<schema, instance, path>: handler<schema[\"params\"] extends nonnullable<schema[\"params\"]> ? typedschematoroute<schema> : omit<typedschematoroute<schema>, \"params\"> & { params: record<extractkwpath<path>, string> }, instance>\n\n# type parameters\n\nname       type\nschema     extends typedschema = typedschema\ninstance   extends kingworldinstance = kingworldinstance\npath       extends string = string\n\n# defined in\n\nsrc/types.ts:164\n\n\n# variables\n\n\n# schema\n\n• const schema: unique symbol\n\n# defined in\n\nsrc/utils.ts:8",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Getting Started",
      "frontmatter": {},
      "regularPath": "/guide/",
      "relativePath": "guide/index.md",
      "key": "v-2187129e",
      "path": "/guide/",
      "headers": [
        {
          "level": 2,
          "title": "Quick Start",
          "slug": "quick-start",
          "normalizedTitle": "quick start",
          "charIndex": 86
        }
      ],
      "headersStr": "Quick Start",
      "content": "# Getting Started\n\n * This guide covers all aspects of Kingworld from the basics.\n\n\n# Quick Start\n\nKingWorld is a web framework based on Bun.\n\nbun add kingworld\n\n\nNow create index.ts, and place the following:\n\nimport KingWorld from 'kingworld'\n\nnew KingWorld().get('/', () => '🦊 Now foxing').listen(3000)\n\n\nAnd run the server:\n\nbun index.ts\n\n\nThen simply open http://localhost:3000 in your browser.\n\nCongrats! You have just create a new web server in KingWorld 🎉🎉",
      "normalizedContent": "# getting started\n\n * this guide covers all aspects of kingworld from the basics.\n\n\n# quick start\n\nkingworld is a web framework based on bun.\n\nbun add kingworld\n\n\nnow create index.ts, and place the following:\n\nimport kingworld from 'kingworld'\n\nnew kingworld().get('/', () => '🦊 now foxing').listen(3000)\n\n\nand run the server:\n\nbun index.ts\n\n\nthen simply open http://localhost:3000 in your browser.\n\ncongrats! you have just create a new web server in kingworld 🎉🎉",
      "charsets": {}
    },
    {
      "frontmatter": {
        "pageLayout": "PageLayout1"
      },
      "regularPath": "/examples/using-page-layout.html",
      "relativePath": "examples/using-page-layout.md",
      "key": "v-db2ba502",
      "path": "/examples/using-page-layout.html",
      "headersStr": null,
      "content": "",
      "normalizedContent": "",
      "charsets": {}
    },
    {
      "title": "Disable Sidebar Example",
      "frontmatter": {
        "sidebar": false
      },
      "regularPath": "/examples/disable-sidebar.html",
      "relativePath": "examples/disable-sidebar.md",
      "key": "v-40d216e2",
      "path": "/examples/disable-sidebar.html",
      "headers": [
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-2",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-3",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-4",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-5",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-6",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        }
      ],
      "headersStr": "Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example",
      "content": "# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example",
      "normalizedContent": "# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example",
      "charsets": {}
    },
    {
      "title": "Handler",
      "frontmatter": {},
      "regularPath": "/guide/handler.html",
      "relativePath": "guide/handler.md",
      "key": "v-00e58bb6",
      "path": "/guide/handler.html",
      "headers": [
        {
          "level": 2,
          "title": "Handler Request",
          "slug": "handler-request",
          "normalizedTitle": "handler request",
          "charIndex": 659
        }
      ],
      "headersStr": "Handler Request",
      "content": "# Handler\n\nHandler is a callback function that returns Response. Used in HTTP method handler.\n\nnew KingWorld()\n    .get(\n        '/', \n        // This is handler\n        () => \"KingWorld\"\n    )\n    .listen(3000)\n\n\nBy default, handler will accepts two parameters: request and store.\n\n// Simplified Handler\ntype Handler = (request: ParsedRequest, store: Instance['store']) => Response\n\nconst handler: Handler = (request: {\n    request: Request\n    query: ParsedUrlQuery\n    params: Record<string, string>\n    headers: Record<string, string>\n    body: Promise<string | Object>\n    responseHeaders: Record<string, unknown>\n    store: Record<any, unknown>\n})\n\n\n\n# Handler Request\n\nHandler's request consists of\n\n * request [Request]\n   * Native fetch Request\n * query [ParsedUrlQuery]\n   * Parsed Query Parameters as Record<string, string>\n   * Default: {}\n   * Example:\n     * path: /hi?name=fubuki&game=KingWorld\n     * query: { \"name\": \"fubuki\", \"game\": \"KingWorld\" }\n * params [Record<string, string>]\n   * Path paramters as object\n   * Default: {}\n   * Example:\n     * Code: app.get(\"/id/:name/:game\")\n     * path: /id/kurokami/KingWorld\n     * params: { \"name\": \"kurokami\", \"game\": \"KingWorld\" }\n * headers [Record<string, string>]\n   * Function which returns request's headers\n * body [Promise<string | Object>]\n   * Function which returns request's body\n   * By default will return either string or Object\n     * Will return Object if request's header contains Content-Type: application/json, and is deserializable\n     * Otherwise, will return string\n * responseHeaders [Record<string, unknown>]\n   * Mutable object reference, will attached to response's header\n   * For example, adding CORS to response as a plugin\n * status [(statusCode: number) => void]\n   * Function to set response status code explictly",
      "normalizedContent": "# handler\n\nhandler is a callback function that returns response. used in http method handler.\n\nnew kingworld()\n    .get(\n        '/', \n        // this is handler\n        () => \"kingworld\"\n    )\n    .listen(3000)\n\n\nby default, handler will accepts two parameters: request and store.\n\n// simplified handler\ntype handler = (request: parsedrequest, store: instance['store']) => response\n\nconst handler: handler = (request: {\n    request: request\n    query: parsedurlquery\n    params: record<string, string>\n    headers: record<string, string>\n    body: promise<string | object>\n    responseheaders: record<string, unknown>\n    store: record<any, unknown>\n})\n\n\n\n# handler request\n\nhandler's request consists of\n\n * request [request]\n   * native fetch request\n * query [parsedurlquery]\n   * parsed query parameters as record<string, string>\n   * default: {}\n   * example:\n     * path: /hi?name=fubuki&game=kingworld\n     * query: { \"name\": \"fubuki\", \"game\": \"kingworld\" }\n * params [record<string, string>]\n   * path paramters as object\n   * default: {}\n   * example:\n     * code: app.get(\"/id/:name/:game\")\n     * path: /id/kurokami/kingworld\n     * params: { \"name\": \"kurokami\", \"game\": \"kingworld\" }\n * headers [record<string, string>]\n   * function which returns request's headers\n * body [promise<string | object>]\n   * function which returns request's body\n   * by default will return either string or object\n     * will return object if request's header contains content-type: application/json, and is deserializable\n     * otherwise, will return string\n * responseheaders [record<string, unknown>]\n   * mutable object reference, will attached to response's header\n   * for example, adding cors to response as a plugin\n * status [(statuscode: number) => void]\n   * function to set response status code explictly",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Lifecycle",
      "frontmatter": {},
      "regularPath": "/guide/lifecycle.html",
      "relativePath": "guide/lifecycle.md",
      "key": "v-527d6e36",
      "path": "/guide/lifecycle.html",
      "headers": [
        {
          "level": 2,
          "title": "Lifecycle",
          "slug": "lifecycle-2",
          "normalizedTitle": "lifecycle",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Local Hook",
          "slug": "local-hook",
          "normalizedTitle": "local hook",
          "charIndex": 1471
        },
        {
          "level": 3,
          "title": "PreRequestHandler",
          "slug": "prerequesthandler",
          "normalizedTitle": "prerequesthandler",
          "charIndex": 2978
        },
        {
          "level": 3,
          "title": "Handler (Event)",
          "slug": "handler-event",
          "normalizedTitle": "handler (event)",
          "charIndex": 3241
        },
        {
          "level": 2,
          "title": "Transform",
          "slug": "transform",
          "normalizedTitle": "transform",
          "charIndex": 1322
        }
      ],
      "headersStr": "Lifecycle Local Hook PreRequestHandler Handler (Event) Transform",
      "content": "# Lifecycle\n\n\n# Lifecycle\n\nKingWorld request's lifecycle can be illustrate as the following:\n\nStart -> (Loop\n    (Try\n        request -> parse ->\n        | routing |\n        transform -> beforeHandle -> <handle> -> afterHandle -> Response\n                  -> beforeHandle -> afterHandle -> Response\n    Catch -> error)\n) -> Stop\n\n\nThe callback that assigned to lifecycle is called hook.\n\n# Start\n\n * start [VoidLifeCycle]\n   * Call right before server start\n\n# Before Route\n\n * request [BeforeRequestHandler]\n   * Call on new request\n * parse [BodyParser]\n   * Call while parsing body\n   * If truthy value return, value will be assigned to body\n\n# Post Handler\n\n * transform [Handler]\n   * Called before validating request\n   * Use to transform request's body, params, query before validation\n * beforeHandle [Handler]\n   * Handle request before executing path handler\n   * If value returned, will skip to Response process\n * afterHandle [AfterRequestHandler]\n   * Handle request after executing path handler\n   * Use to transform response of beforeHandle and handle, eg. compression\n\n# Stop\n\n * stop [VoidLifeCycle]\n   * Call after server stop, use for cleaning up\n\nLifecycle can be assigned with app.on<lifecycle name>() or app.on(lifeCycleName, callback):\n\nFor example, assigning transform to a request:\n\napp\n    // ? Transform params 'id' to number if available\n    .onTransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id\n    })\n\n\n\n# Local Hook\n\nThere are 2 types of hook\n\n * Global Hook\n   * Assign to every handler\n * Local Hook\n   * Assigned by third parameters of Route Handler or app.<method>(path, handler, localHook)\n   * Affected only scoped handler\n\napp\n    // ? Global Hook\n    .onTransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id + 1\n    })\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        // ? Local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"Shirakami Fubuki\"\n            }\n        }\n    )\n    .get(\"/new/:id\", ({ params: { id, name } }) => `${id} ${name}`)\n    .listen(3000)\n\n// [GET] /id/2/kson => \"3 kson\"\n// [GET] /id/1/白上フブキ => \"2 Shirakami Fubuki\"\n// [GET] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\nYou can have multiple local hooks as well by assigning it as array:\n\napp\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        {\n            transform: [\n                ({ params }) => {\n                    if(params.id)\n                        params.id = +params.id + 1\n                },\n                ({ params }) => {\n                    if(params.name === \"白上フブキ\")\n                        params.name = \"Shirakami Fubuki\"\n                }\n            ]\n        }\n    )\n    .listen(3000)\n\n// [GET] /id/2/kson => \"3 kson\"\n// [GET] /id/1/白上フブキ => \"2 Shirakami Fubuki\"\n// [GET] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\n\n# PreRequestHandler\n\nCallback assigned to lifecycle before routing.\n\nAs it handles before routing, there are no params and query.\n\ntype PreRequestHandler = (request: Request, store: Store) => void\n\n\nLifecycle that assigned with PreRequestHandler:\n\n * onRequest\n\n\n# Handler (Event)\n\nCallback assign to lifecycle after routing.\n\nAccept same value as path handler, @see Handler\n\nLifecycle that assigned with Handler:\n\n * transform\n * beforeHandle\n\n\n# Transform\n\nUse to modify request's body, params, query before validation.\n\napp\n    .get(\n        \"/gamer/:name\", \n        ({ params: { name }, hi }) => hi(name),\n        // ? Local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"Shirakami Fubuki\"\n                    \n                params.hi = (name: string) => `Hi ${name}`\n            }\n        }\n    )\n\n// [GET] /gamer/白上フブキ => \"Shirakami Fubuki\"\n// [GET] /gamer/Botan => \"Botan\"\n\n\nYou can easily modify body in transform to decouple logic into separate plugin.\n\nimport { z } from 'zod'\n\nnew KingWorld()\n\t.post(\n\t\t'/gamer',\n\t\tasync ({ body }) => {\n\t\t\tconst { username } = body\n\n\t\t\treturn `Hi ${username}`\n\t\t},\n\t\t{\n            schema: {\n                body: z.object({\n                    id: z.number(),\n                    username: z.string()\n                })\n            }\n\t\t\ttransform: (request) => {\n\t\t\t\trequest.body.id = +request.body.id\n\t\t\t}\n\t\t}\n\t)\n\t.listen(8080)\n",
      "normalizedContent": "# lifecycle\n\n\n# lifecycle\n\nkingworld request's lifecycle can be illustrate as the following:\n\nstart -> (loop\n    (try\n        request -> parse ->\n        | routing |\n        transform -> beforehandle -> <handle> -> afterhandle -> response\n                  -> beforehandle -> afterhandle -> response\n    catch -> error)\n) -> stop\n\n\nthe callback that assigned to lifecycle is called hook.\n\n# start\n\n * start [voidlifecycle]\n   * call right before server start\n\n# before route\n\n * request [beforerequesthandler]\n   * call on new request\n * parse [bodyparser]\n   * call while parsing body\n   * if truthy value return, value will be assigned to body\n\n# post handler\n\n * transform [handler]\n   * called before validating request\n   * use to transform request's body, params, query before validation\n * beforehandle [handler]\n   * handle request before executing path handler\n   * if value returned, will skip to response process\n * afterhandle [afterrequesthandler]\n   * handle request after executing path handler\n   * use to transform response of beforehandle and handle, eg. compression\n\n# stop\n\n * stop [voidlifecycle]\n   * call after server stop, use for cleaning up\n\nlifecycle can be assigned with app.on<lifecycle name>() or app.on(lifecyclename, callback):\n\nfor example, assigning transform to a request:\n\napp\n    // ? transform params 'id' to number if available\n    .ontransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id\n    })\n\n\n\n# local hook\n\nthere are 2 types of hook\n\n * global hook\n   * assign to every handler\n * local hook\n   * assigned by third parameters of route handler or app.<method>(path, handler, localhook)\n   * affected only scoped handler\n\napp\n    // ? global hook\n    .ontransform(({ params }) => {\n        if(params.id)\n            params.id = +params.id + 1\n    })\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        // ? local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"shirakami fubuki\"\n            }\n        }\n    )\n    .get(\"/new/:id\", ({ params: { id, name } }) => `${id} ${name}`)\n    .listen(3000)\n\n// [get] /id/2/kson => \"3 kson\"\n// [get] /id/1/白上フブキ => \"2 shirakami fubuki\"\n// [get] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\nyou can have multiple local hooks as well by assigning it as array:\n\napp\n    .get(\n        \"/id/:id/:name\", \n        ({ params: { id, name } }) => `${id} ${name}`,\n        {\n            transform: [\n                ({ params }) => {\n                    if(params.id)\n                        params.id = +params.id + 1\n                },\n                ({ params }) => {\n                    if(params.name === \"白上フブキ\")\n                        params.name = \"shirakami fubuki\"\n                }\n            ]\n        }\n    )\n    .listen(3000)\n\n// [get] /id/2/kson => \"3 kson\"\n// [get] /id/1/白上フブキ => \"2 shirakami fubuki\"\n// [get] /new/1/白上フブキ => \"2 白上フブキ\"\n\n\n\n# prerequesthandler\n\ncallback assigned to lifecycle before routing.\n\nas it handles before routing, there are no params and query.\n\ntype prerequesthandler = (request: request, store: store) => void\n\n\nlifecycle that assigned with prerequesthandler:\n\n * onrequest\n\n\n# handler (event)\n\ncallback assign to lifecycle after routing.\n\naccept same value as path handler, @see handler\n\nlifecycle that assigned with handler:\n\n * transform\n * beforehandle\n\n\n# transform\n\nuse to modify request's body, params, query before validation.\n\napp\n    .get(\n        \"/gamer/:name\", \n        ({ params: { name }, hi }) => hi(name),\n        // ? local hook\n        {\n            transform: ({ params }) => {\n                if(params.name === \"白上フブキ\")\n                    params.name = \"shirakami fubuki\"\n                    \n                params.hi = (name: string) => `hi ${name}`\n            }\n        }\n    )\n\n// [get] /gamer/白上フブキ => \"shirakami fubuki\"\n// [get] /gamer/botan => \"botan\"\n\n\nyou can easily modify body in transform to decouple logic into separate plugin.\n\nimport { z } from 'zod'\n\nnew kingworld()\n\t.post(\n\t\t'/gamer',\n\t\tasync ({ body }) => {\n\t\t\tconst { username } = body\n\n\t\t\treturn `hi ${username}`\n\t\t},\n\t\t{\n            schema: {\n                body: z.object({\n                    id: z.number(),\n                    username: z.string()\n                })\n            }\n\t\t\ttransform: (request) => {\n\t\t\t\trequest.body.id = +request.body.id\n\t\t\t}\n\t\t}\n\t)\n\t.listen(8080)\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Plugins",
      "frontmatter": {},
      "regularPath": "/guide/plugins.html",
      "relativePath": "guide/plugins.md",
      "key": "v-f0590936",
      "path": "/guide/plugins.html",
      "headers": [
        {
          "level": 3,
          "title": "Local plugin custom type",
          "slug": "local-plugin-custom-type",
          "normalizedTitle": "local plugin custom type",
          "charIndex": 2267
        },
        {
          "level": 2,
          "title": "Async Plugin",
          "slug": "async-plugin",
          "normalizedTitle": "async plugin",
          "charIndex": 3141
        },
        {
          "level": 2,
          "title": "KingWorld Instance",
          "slug": "kingworld-instance",
          "normalizedTitle": "kingworld instance",
          "charIndex": 3615
        }
      ],
      "headersStr": "Local plugin custom type Async Plugin KingWorld Instance",
      "content": "# Plugins\n\nPlugin is used to decouple logic into smaller function.\n\nimport type KingWorld from 'kingworld'\n\nconst hi = (app: KingWorld) => app\n    .get('/hi', () => 'Hi')\n\nconst app = new KingWorld()\n    .use(hi)\n    .get('/', () => 'KINGWORLD')\n    .listen(3000)\n\n// [GET] / => \"KINGWORLD\"\n// [GET] /hi => \"Hi\"\n\n\nHowever, plugin can also be used for assigning new store, and hook making it very useful.\n\nTo register a plugin, simply add plugin into use.\n\nuse can accept 2 parameters:\n\n * plugin [Plugin]\n * config [Config?] (Optional)\n\nconst plugin = (\n    app: KingWorld, \n    // Config (2nd paramters of `use`)\n    { prefix = '/fbk' } = {}\n) => app\n        .group(prefix, (app) => {\n            app.get('/plugin', () => 'From Plugin')\n        })\n\nnew KingWorld()\n    .use(app, {\n        prefix: '/fubuki'\n    })\n\n\nTo develop plugin with type support, Plugin can accepts generic.\n\nconst plugin = (app, { prefix = '/fbk' } = {})  => \n    app\n        .state('fromPlugin', 'From Logger')\n        .onTransform(({ responseHeaders }) => {\n            request.log = () => {\n                console.log('From Logger')\n            }\n\n            responseHeaders['X-POWERED-BY'] = 'KINGWORLD'\n        })\n        .group(prefix, (app) => {\n            app.get('/plugin', () => 'From Plugin')\n        })\n\nconst app = new KingWorld<{\n    Store: {\n        build: number\n        date: number\n    }\n}>()\n    .use(plugin)\n    .get('/', ({ log }) => {\n        log()\n\n        return 'KingWorld'\n    })\n\n// [GET] /fbk/plugin => \"From Plugin\"\n\n\nSince Plugin have a type declaration, all request and store will be fully type and extended from plugin.\n\nFor example:\n\n// Before plugin registration\nnew KingWorld<{\n    Store: {\n        build: number\n        date: number\n    }\n}>()\n\n// After plugin registration\nnew KingWorld<{\n    Store: {\n        build: number\n        date: number\n    } & {\n        fromPlugin: 'From Logger'\n    }\n    Request: {\n        log: () => void\n    }\n}>()\n\n\nThis will enforce type safety across codebase.\n\nconst app = new KingWorld<{\n    Store: {\n        build: number\n        date: number\n    }\n}>()\n    .use(plugin)\n    .get('/', ({ log }) => {\n        // `log` get type declaration reference from `plugin`\n        log()\n\n        return 'KingWorld'\n    })\n\n\n\n# Local plugin custom type\n\nSometime, when you develop local plugin, type reference from main instance is need, but not available after separation.\n\nconst plugin = (app: KingWorld)  => \n    app\n        .get(\"/user/:id\", ({ db, params: { id } }) => \n            // ❌ Type Error: db is not defined or smth like that\n            db.find(id)\n        )\n\nconst app = new KingWorld<{\n    Store: {\n        database: Database\n    }\n}>()\n    .state('db', database)\n    .use(plugin)\n\n\nThat's why plugin can accept the third generic for adding temporary local type but do not extend the main instance.\n\nimport type KingWorld from 'kingworld'\n\nconst plugin = (app: KingWorld)  => \n    app\n        .get(\"/user/:id\", ({ db, params: { id } }) => \n            // ✅ db is now typed\n            db.find(id)\n        )\n\nconst app = new KingWorld()\n    .state('db', database)\n    .use(plugin)\n\n\n\n# Async Plugin\n\nTo create an async plugin, simply create an async function return callback for plugin.\n\nconst plugin = async () => {\n    const db = await setupDatabase()\n\n    return (app: KingWorld) => \n        app\n            .state('db', database)\n            .get(\"/user/:id\", ({ db, params: { id } }) => \n                // ✅ db is now typed\n                db.find(id)\n            )\n}\n\nconst app = new KingWorld()\n    .state('db', database)\n    .use(await plugin())\n\n\n\n# KingWorld Instance\n\nKingWorld can accepts named generic to type global instance.\n\nFor example, type-strict store.\n\nconst app = new KingWorld<{\n    Store: {\n        build: number\n    }\n}>()\n    .state('build', 1)\n\n\nKingWorld instance can accept generic of KingWorldInstance\n\nexport interface KingWorldInstance<\n\tStore extends Record<string, any> = {},\n\tRequest extends Record<string, any> = {}\n> {\n\tRequest?: Request\n\tStore: Store\n}\n",
      "normalizedContent": "# plugins\n\nplugin is used to decouple logic into smaller function.\n\nimport type kingworld from 'kingworld'\n\nconst hi = (app: kingworld) => app\n    .get('/hi', () => 'hi')\n\nconst app = new kingworld()\n    .use(hi)\n    .get('/', () => 'kingworld')\n    .listen(3000)\n\n// [get] / => \"kingworld\"\n// [get] /hi => \"hi\"\n\n\nhowever, plugin can also be used for assigning new store, and hook making it very useful.\n\nto register a plugin, simply add plugin into use.\n\nuse can accept 2 parameters:\n\n * plugin [plugin]\n * config [config?] (optional)\n\nconst plugin = (\n    app: kingworld, \n    // config (2nd paramters of `use`)\n    { prefix = '/fbk' } = {}\n) => app\n        .group(prefix, (app) => {\n            app.get('/plugin', () => 'from plugin')\n        })\n\nnew kingworld()\n    .use(app, {\n        prefix: '/fubuki'\n    })\n\n\nto develop plugin with type support, plugin can accepts generic.\n\nconst plugin = (app, { prefix = '/fbk' } = {})  => \n    app\n        .state('fromplugin', 'from logger')\n        .ontransform(({ responseheaders }) => {\n            request.log = () => {\n                console.log('from logger')\n            }\n\n            responseheaders['x-powered-by'] = 'kingworld'\n        })\n        .group(prefix, (app) => {\n            app.get('/plugin', () => 'from plugin')\n        })\n\nconst app = new kingworld<{\n    store: {\n        build: number\n        date: number\n    }\n}>()\n    .use(plugin)\n    .get('/', ({ log }) => {\n        log()\n\n        return 'kingworld'\n    })\n\n// [get] /fbk/plugin => \"from plugin\"\n\n\nsince plugin have a type declaration, all request and store will be fully type and extended from plugin.\n\nfor example:\n\n// before plugin registration\nnew kingworld<{\n    store: {\n        build: number\n        date: number\n    }\n}>()\n\n// after plugin registration\nnew kingworld<{\n    store: {\n        build: number\n        date: number\n    } & {\n        fromplugin: 'from logger'\n    }\n    request: {\n        log: () => void\n    }\n}>()\n\n\nthis will enforce type safety across codebase.\n\nconst app = new kingworld<{\n    store: {\n        build: number\n        date: number\n    }\n}>()\n    .use(plugin)\n    .get('/', ({ log }) => {\n        // `log` get type declaration reference from `plugin`\n        log()\n\n        return 'kingworld'\n    })\n\n\n\n# local plugin custom type\n\nsometime, when you develop local plugin, type reference from main instance is need, but not available after separation.\n\nconst plugin = (app: kingworld)  => \n    app\n        .get(\"/user/:id\", ({ db, params: { id } }) => \n            // ❌ type error: db is not defined or smth like that\n            db.find(id)\n        )\n\nconst app = new kingworld<{\n    store: {\n        database: database\n    }\n}>()\n    .state('db', database)\n    .use(plugin)\n\n\nthat's why plugin can accept the third generic for adding temporary local type but do not extend the main instance.\n\nimport type kingworld from 'kingworld'\n\nconst plugin = (app: kingworld)  => \n    app\n        .get(\"/user/:id\", ({ db, params: { id } }) => \n            // ✅ db is now typed\n            db.find(id)\n        )\n\nconst app = new kingworld()\n    .state('db', database)\n    .use(plugin)\n\n\n\n# async plugin\n\nto create an async plugin, simply create an async function return callback for plugin.\n\nconst plugin = async () => {\n    const db = await setupdatabase()\n\n    return (app: kingworld) => \n        app\n            .state('db', database)\n            .get(\"/user/:id\", ({ db, params: { id } }) => \n                // ✅ db is now typed\n                db.find(id)\n            )\n}\n\nconst app = new kingworld()\n    .state('db', database)\n    .use(await plugin())\n\n\n\n# kingworld instance\n\nkingworld can accepts named generic to type global instance.\n\nfor example, type-strict store.\n\nconst app = new kingworld<{\n    store: {\n        build: number\n    }\n}>()\n    .state('build', 1)\n\n\nkingworld instance can accept generic of kingworldinstance\n\nexport interface kingworldinstance<\n\tstore extends record<string, any> = {},\n\trequest extends record<string, any> = {}\n> {\n\trequest?: request\n\tstore: store\n}\n",
      "charsets": {}
    },
    {
      "title": "Routing",
      "frontmatter": {},
      "regularPath": "/guide/routing.html",
      "relativePath": "guide/routing.md",
      "key": "v-e8a57ab6",
      "path": "/guide/routing.html",
      "headersStr": null,
      "content": "# Routing\n\nCommon HTTP methods have a built-in methods for convenient usage:\n\napp.get(\"/hi\", () => \"Hi\")\n    .post(\"/hi\", () => \"From Post\")\n    .put(\"/hi\", () => \"From Put\")\n    .on(\"M-SEARCH\", async () => \"Custom Method\")\n    .listen(3000)\n\n// [GET] /hi => \"Hi\"\n// [POST] /hi => \"From Post\"\n// [PUT] /hi => \"From Put\"\n// [M-SEARCH] /hi => \"Custom Method\"\n\n\nTo return JSON, simply return any serializable object:\n\napp.get(\"/json\", () => ({\n    hi: 'KingWorld'\n}))\n\n// [GET] /json => {\"hi\": \"KingWorld\"}\n\n\nAll values returned from handler will be transformed into Response.\n\nYou can return Response if you want to declaratively control the response.\n\napp\n    .get(\"/number\", () => 1)\n    .get(\"/boolean\", () => true)\n    .get(\"/promise\", () => new Promise((resovle) => resolve(\"Ok\")))\n    .get(\"/response\", () => new Response(\"Hi\", {\n        status: 200,\n        headers: {\n            \"x-powered-by\": \"KingWorld\"\n        }\n    }))\n\n// [GET] /number => \"1\"\n// [GET] /boolean => \"true\"\n// [GET] /promise => \"Ok\"\n// [GET] /response => \"Hi\"\n\n\nYou can use ctx.status to explictly set status code without creating Response\n\napp\n    .get(\"/401\", ({ status }) => {\n        status(401)\n\n        return \"This should be 401\"\n    })\n\n\nFiles are also transformed to response. Simply return Bun.file to serve static file.\n\napp.get(\"/tako\", () => Bun.file('./example/takodachi.png'))\n\n\nTo get path paramameters, prefix the path with a colon:\n\napp.get(\"/id/:id\", ({ params: { id } }) => id)\n\n// [GET] /id/123 => 123\n\n\nWildcard works as expected:\n\napp.get(\"/wildcard/*\", () => \"Hi\")\n\n// [GET] /wildcard/ok => \"Hi\"\n// [GET] /wildcard/abc/def/ghi => \"Hi\"\n\n\nFor a fallback page, use default:\n\napp.get(\"/\", () => \"Hi\")\n    .default(() => new Response(\"Not stonk :(\", {\n        status: 404\n    }))\n\n// [GET] / => \"Not stonk :(\"\n\n\nYou can group multiple route with a prefix with group:\n\napp\n    .get(\"/\", () => \"Hi\")\n    .group(\"/auth\", app => {\n        app\n            .get(\"/\", () => \"Hi\")\n            .post(\"/sign-in\", ({ body }) => body)\n            .put(\"/sign-up\", ({ body }) => body)\n    })\n    .listen(3000)\n\n// [GET] /auth/sign-in => \"Hi\"\n// [POST] /auth/sign-in => <body>\n// [PUT] /auth/sign-up => <body>\n\n\nAnd you can decouple the route logic to a separate plugin.\n\nimport KingWorld, { type Plugin } from 'kingworld'\n\nconst hi = (app: KingWorld) => app\n    .get('/hi', () => 'Hi')\n\nconst app = new KingWorld()\n    .use(hi)\n    .get('/', () => 'KINGWORLD')\n    .listen(3000)\n\n// [GET] / => \"KINGWORLD\"\n// [GET] /hi => \"Hi\"\n\n\nLastly, you can specified hostname to listen if need:\n\nimport KingWorld, { type Plugin } from 'kingworld'\n\nconst app = new KingWorld()\n    .get('/', () => 'KINGWORLD')\n    .listen({\n        port: 3000,\n        hostname: '0.0.0.0'\n    })\n\n// [GET] / => \"KINGWORLD\"\n",
      "normalizedContent": "# routing\n\ncommon http methods have a built-in methods for convenient usage:\n\napp.get(\"/hi\", () => \"hi\")\n    .post(\"/hi\", () => \"from post\")\n    .put(\"/hi\", () => \"from put\")\n    .on(\"m-search\", async () => \"custom method\")\n    .listen(3000)\n\n// [get] /hi => \"hi\"\n// [post] /hi => \"from post\"\n// [put] /hi => \"from put\"\n// [m-search] /hi => \"custom method\"\n\n\nto return json, simply return any serializable object:\n\napp.get(\"/json\", () => ({\n    hi: 'kingworld'\n}))\n\n// [get] /json => {\"hi\": \"kingworld\"}\n\n\nall values returned from handler will be transformed into response.\n\nyou can return response if you want to declaratively control the response.\n\napp\n    .get(\"/number\", () => 1)\n    .get(\"/boolean\", () => true)\n    .get(\"/promise\", () => new promise((resovle) => resolve(\"ok\")))\n    .get(\"/response\", () => new response(\"hi\", {\n        status: 200,\n        headers: {\n            \"x-powered-by\": \"kingworld\"\n        }\n    }))\n\n// [get] /number => \"1\"\n// [get] /boolean => \"true\"\n// [get] /promise => \"ok\"\n// [get] /response => \"hi\"\n\n\nyou can use ctx.status to explictly set status code without creating response\n\napp\n    .get(\"/401\", ({ status }) => {\n        status(401)\n\n        return \"this should be 401\"\n    })\n\n\nfiles are also transformed to response. simply return bun.file to serve static file.\n\napp.get(\"/tako\", () => bun.file('./example/takodachi.png'))\n\n\nto get path paramameters, prefix the path with a colon:\n\napp.get(\"/id/:id\", ({ params: { id } }) => id)\n\n// [get] /id/123 => 123\n\n\nwildcard works as expected:\n\napp.get(\"/wildcard/*\", () => \"hi\")\n\n// [get] /wildcard/ok => \"hi\"\n// [get] /wildcard/abc/def/ghi => \"hi\"\n\n\nfor a fallback page, use default:\n\napp.get(\"/\", () => \"hi\")\n    .default(() => new response(\"not stonk :(\", {\n        status: 404\n    }))\n\n// [get] / => \"not stonk :(\"\n\n\nyou can group multiple route with a prefix with group:\n\napp\n    .get(\"/\", () => \"hi\")\n    .group(\"/auth\", app => {\n        app\n            .get(\"/\", () => \"hi\")\n            .post(\"/sign-in\", ({ body }) => body)\n            .put(\"/sign-up\", ({ body }) => body)\n    })\n    .listen(3000)\n\n// [get] /auth/sign-in => \"hi\"\n// [post] /auth/sign-in => <body>\n// [put] /auth/sign-up => <body>\n\n\nand you can decouple the route logic to a separate plugin.\n\nimport kingworld, { type plugin } from 'kingworld'\n\nconst hi = (app: kingworld) => app\n    .get('/hi', () => 'hi')\n\nconst app = new kingworld()\n    .use(hi)\n    .get('/', () => 'kingworld')\n    .listen(3000)\n\n// [get] / => \"kingworld\"\n// [get] /hi => \"hi\"\n\n\nlastly, you can specified hostname to listen if need:\n\nimport kingworld, { type plugin } from 'kingworld'\n\nconst app = new kingworld()\n    .get('/', () => 'kingworld')\n    .listen({\n        port: 3000,\n        hostname: '0.0.0.0'\n    })\n\n// [get] / => \"kingworld\"\n",
      "charsets": {}
    },
    {
      "title": "Store",
      "frontmatter": {},
      "regularPath": "/guide/store.html",
      "relativePath": "guide/store.md",
      "key": "v-7a38c445",
      "path": "/guide/store.html",
      "headersStr": null,
      "content": "# Store\n\nStore is a singleton store of the application.\n\nIs recommended for local state, reference of database connection, and other things that need to be available to be used with handler.\n\nnew KingWorld()\n    .state('build', 0.5)\n    .get(\"/build\", ({ store: { build } }) => build)\n    .get(\"/random\", ({ store: { random }}) => random)\n    .listen(3000)\n\n// [GET] /build => 0.5\n\n\nState will be assigned once start, and it's a mutable global store for server.",
      "normalizedContent": "# store\n\nstore is a singleton store of the application.\n\nis recommended for local state, reference of database connection, and other things that need to be available to be used with handler.\n\nnew kingworld()\n    .state('build', 0.5)\n    .get(\"/build\", ({ store: { build } }) => build)\n    .get(\"/random\", ({ store: { random }}) => random)\n    .listen(3000)\n\n// [get] /build => 0.5\n\n\nstate will be assigned once start, and it's a mutable global store for server.",
      "charsets": {}
    },
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "actionText": "Getting Started",
        "actionLink": "/guide/",
        "subActionText": "API Docs",
        "subActionLink": "/api/",
        "features": [
          {
            "title": "Speed",
            "details": "Build for speed and optimized for Bun in mind."
          },
          {
            "title": "Scalable",
            "details": "Designed for micro-service, decoupled logic and treat everything as building block."
          },
          {
            "title": "Simplicity",
            "details": "Composed patterns into plugin, removing redundant logic into one simple plugin."
          },
          {
            "title": "Friendliness",
            "details": "Familiar pattern with enhance TypeScript supports eg. auto infers type paramters."
          }
        ]
      },
      "regularPath": "/",
      "relativePath": "index.md",
      "key": "v-94def204",
      "path": "/",
      "headersStr": null,
      "content": "An Elegant Bun Web Framework\n\nFast, and friendly Bun web framework.\n\nReleased under the MIT License.\nCopyright © 2022 saltyAom and contributors.",
      "normalizedContent": "an elegant bun web framework\n\nfast, and friendly bun web framework.\n\nreleased under the mit license.\ncopyright © 2022 saltyaom and contributors.",
      "charsets": {}
    },
    {
      "title": "Writing Tests",
      "frontmatter": {},
      "regularPath": "/guide/testing.html",
      "relativePath": "guide/testing.md",
      "key": "v-59620d65",
      "path": "/guide/testing.html",
      "headersStr": null,
      "content": "# Writing Tests\n\nKingWorld is designed to be serverless, only one simple handle is need to be assigned to serverless function.\n\nThis also be used to create simple test environment, by simply call handle function.\n\nimport { describe, expect, it } from \"bun:test\"\n\nconst req = (path: string) => new Request(path)\n\ndescribe('Correctness', () => {\n\tit('[GET] /', async () => {\n\t\tconst app = new KingWorld().get('/', () => 'Hi')\n\t\tconst res = await app.handle(req('/'))\n\n\t\texpect(await res.text()).toBe('Hi')\n\t})\n})\n",
      "normalizedContent": "# writing tests\n\nkingworld is designed to be serverless, only one simple handle is need to be assigned to serverless function.\n\nthis also be used to create simple test environment, by simply call handle function.\n\nimport { describe, expect, it } from \"bun:test\"\n\nconst req = (path: string) => new request(path)\n\ndescribe('correctness', () => {\n\tit('[get] /', async () => {\n\t\tconst app = new kingworld().get('/', () => 'hi')\n\t\tconst res = await app.handle(req('/'))\n\n\t\texpect(await res.text()).tobe('hi')\n\t})\n})\n",
      "charsets": {}
    }
  ],
  "themeConfig": {
    "enableDarkMode": true,
    "repo": "https://github.com/saltyAom/kingworld",
    "nav": [
      {
        "text": "Guide",
        "link": "/guide/"
      },
      {
        "text": "API",
        "link": "/api/"
      }
    ],
    "sidebar": {
      "/guide/": [
        {
          "title": "Introduction",
          "collapsable": false,
          "children": [
            "/guide/"
          ]
        },
        {
          "title": "Guide",
          "collapsable": true,
          "children": [
            "/guide/handler",
            "/guide/lifecycle",
            "/guide/plugins",
            "/guide/routing",
            "/guide/store",
            "/guide/testing"
          ]
        },
        {
          "title": "Reference",
          "collapsable": false,
          "children": [
            [
              "https://vuepress.vuejs.org/theme/default-theme-config.html",
              "Default Theme Config"
            ]
          ]
        }
      ],
      "/api/": [
        {
          "title": "Config",
          "path": "/api/",
          "collapsable": false,
          "children": [
            "/api/config-theme",
            "/api/config-frontmatter",
            "/api/config-home"
          ]
        }
      ]
    },
    "codeSwitcher": {
      "groups": {
        "default": {
          "ts": "TypeScript",
          "js": "JavaScript"
        },
        "plugin-usage": {
          "tuple": "Tuple",
          "object": "Object"
        }
      }
    }
  }
}