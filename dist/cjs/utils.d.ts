import { TypeCheck } from '@sinclair/typebox/compiler';
import type { TSchema } from '@sinclair/typebox';
import type { DeepMergeTwoTypes, LifeCycleStore, LocalHook } from './types';
export declare const SCHEMA: unique symbol;
export declare const mergeObjectArray: <T>(a: T | T[], b: T | T[]) => T[];
export declare const mergeHook: (a: LocalHook<any> | LifeCycleStore<any>, b: LocalHook<any>) => LocalHook<any, any>;
export declare const clone: <T extends Object | any[] = Object | any[]>(value: T) => T;
export declare const getPath: (url: string) => string;
export declare const mapQuery: (url: string) => Record<string, string>;
export declare const mergeDeep: <A extends Object = Object, B extends Object = Object>(target: A, source: B) => DeepMergeTwoTypes<A, B>;
export declare const createValidationError: (type: string, validator: TypeCheck<any>, value: any) => Error;
export declare const getSchemaValidator: <Schema extends TSchema | undefined = undefined>(schema: Schema, additionalProperties?: boolean) => TypeCheck<NonNullable<Schema>> | undefined;
