export const parseHeader=a=>{let b={};for(let[c,d]of a.entries())b[c]=d;return b};export const concatArrayObject=(a,b)=>b?a.concat(b):a;export const mergeHook=(a,b)=>{var c,d,e,f;return{onRequest:concatArrayObject(null==a?void 0:a.onRequest,null==b?void 0:b.onRequest)??[],transform:concatArrayObject(null==a?void 0:a.transform,null==b?void 0:b.transform)??[],preHandler:concatArrayObject(null==a?void 0:a.preHandler,null==b?void 0:b.preHandler)??[],schema:{body:concatArrayObject(null==a?void 0:a.schema.body,null==b?void 0:null===(c=b.schema)|| void 0===c?void 0:c.body)??[],header:concatArrayObject(null==a?void 0:a.schema.header,null==b?void 0:null===(d=b.schema)|| void 0===d?void 0:d.header)??[],query:concatArrayObject(null==a?void 0:a.schema.query,null==b?void 0:null===(e=b.schema)|| void 0===e?void 0:e.query)??[],params:concatArrayObject(null==a?void 0:a.schema.params,null==b?void 0:null===(f=b.schema)|| void 0===f?void 0:f.params)??[]}}};export const isPromise=a=>"function"==typeof(null==a?void 0:a.then);export const clone=a=>{let b=Array.isArray(a)?[]:{},c;for(let d in a)c=a[d],b[d]="object"==typeof c?clone(c):c;return b}
//# sourceMappingURL=utils.js.map