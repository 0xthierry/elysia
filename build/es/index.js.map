{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import StringTheocracy, { type HTTPMethod } from 'string-theocracy'\n\nimport validate from 'fluent-schema-validator'\n\nimport { composePreHandler, composeHandler } from './handler'\nimport {\n    concatArrayObject,\n    mergeHook,\n    parseHeader,\n    isPromise,\n    clone\n} from './utils'\n\nimport type { JSONSchema } from 'fluent-json-schema'\n\nimport type {\n    Handler,\n    EmptyHandler,\n    Hook,\n    HookEvent,\n    RegisterHook,\n    PreRequestHandler,\n    TypedRoute,\n    Schemas,\n    Plugin,\n    ParsedRequest,\n    KingWorldInstance,\n    ComposedHandler\n} from './types'\n\nconst jsonHeader = Object.freeze({\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n\nexport default class KingWorld<\n    Instance extends KingWorldInstance = KingWorldInstance\n> {\n    router: StringTheocracy<ComposedHandler>\n    store: Instance['Store']\n    #ref: [keyof Instance['Store'], any][]\n    hook: Hook<Instance>\n\n    constructor() {\n        this.router = new StringTheocracy()\n\n        this.store = {} as Instance['Store']\n        this.#ref = []\n        this.hook = {\n            onRequest: [],\n            transform: [],\n            preHandler: [],\n            schema: {\n                body: [],\n                header: [],\n                query: [],\n                params: []\n            }\n        }\n\n        this.default(\n            () =>\n                new Response('Not Found', {\n                    status: 404\n                })\n        )\n    }\n\n    #addHandler<Route extends TypedRoute = TypedRoute>(\n        method: HTTPMethod,\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.router.on(\n            method,\n            path,\n            composeHandler(\n                handler,\n                clone(mergeHook(this.hook as Hook, hook as RegisterHook))\n            )\n        )\n    }\n\n    onRequest(handler: PreRequestHandler<Instance['Store']>) {\n        this.hook.onRequest.push(handler)\n\n        return this\n    }\n\n    transform(handler: Handler<{}, Instance>) {\n        this.hook.transform.push(handler)\n\n        return this\n    }\n\n    schema(schema: Schemas) {\n        if (schema.body)\n            this.hook.schema.body = this.hook.schema.body.concat(schema.body)\n\n        if (schema.header)\n            this.hook.schema.body = this.hook.schema.body.concat(schema.header)\n\n        if (schema.params)\n            this.hook.schema.params = this.hook.schema.body.concat(\n                schema.params\n            )\n\n        if (schema.query)\n            this.hook.schema.query = this.hook.schema.body.concat(schema.query)\n\n        return this\n    }\n\n    preHandler(handler: Handler<{}, Instance>) {\n        this.hook.preHandler.push(handler)\n\n        return this\n    }\n\n    when<Event extends HookEvent = HookEvent>(\n        type: Event,\n        handler: RegisterHook<Instance['Store']>[Event]\n    ) {\n        switch (type) {\n            case 'onRequest':\n                this.hook.onRequest.push(\n                    handler as PreRequestHandler<Instance['Store']>\n                )\n\n            case 'transform':\n                this.hook.transform.push(handler as Handler<{}, Instance>)\n\n            case 'preHandler':\n                this.hook.preHandler.push(handler as Handler<{}, Instance>)\n        }\n\n        return this\n    }\n\n    group(prefix: string, run: (group: KingWorld<Instance>) => void) {\n        const instance = new KingWorld<Instance>()\n        run(instance)\n\n        this.store = Object.assign(this.store, instance.store)\n\n        Object.values(instance.router.routes).forEach(\n            ({ method, path, handler }) => {\n                this.router.on(method, `${prefix}/${path}`, handler)\n            }\n        )\n\n        return this\n    }\n\n    guard(\n        hook: RegisterHook<any, Instance>,\n        run: (group: KingWorld<Instance>) => void\n    ) {\n        const instance = new KingWorld<Instance>()\n        run(instance)\n\n        this.store = Object.assign(this.store, instance.store)\n\n        instance.router.routes.forEach(({ method, path, handler }) => {\n            this.router.on(method, path, handler)\n        })\n\n        return this\n    }\n\n    use<\n        CurrentInstance extends KingWorldInstance = Instance,\n        Config = Object,\n        PluginInstance extends KingWorldInstance = KingWorldInstance\n    >(\n        plugin: Plugin<Config, PluginInstance, CurrentInstance>,\n        config?: Config\n    ): KingWorld<Instance & PluginInstance> {\n        // ? Need hack, because instance need to have both type\n        // ? but before transform type won't we available\n        return plugin(this as any, config) as any\n    }\n\n    get<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('GET', path, handler, hook)\n\n        return this\n    }\n\n    post<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('POST', path, handler, hook)\n\n        return this\n    }\n\n    put<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('PUT', path, handler)\n\n        return this\n    }\n\n    patch<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('PATCH', path, handler)\n\n        return this\n    }\n\n    delete<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('DELETE', path, handler)\n\n        return this\n    }\n\n    options<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('OPTIONS', path, handler)\n\n        return this\n    }\n\n    head<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('HEAD', path, handler)\n\n        return this\n    }\n\n    trace<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('TRACE', path, handler)\n\n        return this\n    }\n\n    connect<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('CONNECT', path, handler)\n\n        return this\n    }\n\n    on<Route extends TypedRoute = TypedRoute>(\n        method: HTTPMethod,\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler(method, path, handler, hook)\n\n        return this\n    }\n\n    off(method: HTTPMethod, path: string) {\n        this.router.off(method, path)\n    }\n\n    default<Route extends TypedRoute = TypedRoute>(\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route>\n    ) {\n        this.router.default(\n            composeHandler(\n                handler,\n                mergeHook(clone(this.hook) as Hook, hook as RegisterHook)\n            )\n        )\n\n        return this\n    }\n\n    state(\n        name: keyof Instance['Store'],\n        value: Instance['Store'][keyof Instance['Store']]\n    ) {\n        this.store[name] = value\n\n        return this\n    }\n\n    ref(\n        name: keyof Instance['Store'],\n        value:\n            | Instance['Store'][keyof Instance['Store']]\n            | (() => Instance['Store'][keyof Instance['Store']])\n            | (() => Promise<Instance['Store'][keyof Instance['Store']]>)\n    ) {\n        this.#ref.push([name, value])\n\n        return this\n    }\n\n    handle = async (request: Request) => {\n        const store: Partial<Instance['Store']> = Object.assign({}, this.store)\n\n        if (this.#ref[0])\n            for (const [key, value] of this.#ref)\n                store[key] =\n                    typeof value === 'function'\n                        ? Promise.resolve(value())\n                        : value\n\n        if (this.hook.onRequest[0])\n            for (const onRequest of this.hook.onRequest)\n                Promise.resolve(onRequest(request, store))\n\n        const {\n            found,\n            method,\n            path,\n            handler: handle,\n            params,\n            query\n        } = this.router.find(request.method as HTTPMethod, request.url)\n\n        let body: string | Object\n        const getBody = async () => {\n            if (body) return body\n\n            body = await Promise.resolve(\n                request\n                    .text()\n                    .then((body: string) =>\n                        body.startsWith('{') || body.startsWith('[')\n                            ? JSON.parse(body)\n                            : body\n                    )\n            )\n\n            return body\n        }\n\n        // ? Might have additional field attach from plugin, so forced type cast here\n        const parsedRequest: ParsedRequest = {\n            request,\n            params,\n            query,\n            headers: () => parseHeader(request.headers),\n            body: getBody,\n            responseHeader: {}\n        } as ParsedRequest\n\n        const [handler, hook] = handle\n\n        if (!found) return handler(parsedRequest, store)\n\n        const runPreHandler = (h: Handler[]) =>\n            composePreHandler<Instance>(h, parsedRequest, store)\n\n        if (hook.transform[0]) {\n            const transformed = await runPreHandler(hook.transform)\n            if (transformed) return transformed\n        }\n\n        if (\n            hook.schema.body[0] ||\n            hook.schema.header[0] ||\n            hook.schema.params[0] ||\n            hook.schema.query[0]\n        ) {\n            const createParser = (\n                type: string,\n                value: any,\n                schemas: JSONSchema[]\n            ) => {\n                for (const schema of schemas)\n                    try {\n                        const validated = validate(value, schema)\n\n                        if (!validated)\n                            return new Response(`Invalid ${type}`, {\n                                status: 400\n                            })\n                    } catch (error) {\n                        return new Response(`Unable to parse ${type}`, {\n                            status: 422\n                        })\n                    }\n            }\n\n            if (hook.schema.body[0]) {\n                const invalidBody = createParser(\n                    'body',\n                    await getBody(),\n                    hook.schema.body\n                )\n                if (invalidBody) return invalidBody\n            }\n\n            if (hook.schema.params[0]) {\n                const invalidParams = createParser(\n                    'params',\n                    params,\n                    hook.schema.params\n                )\n                if (invalidParams) return invalidParams\n            }\n\n            if (hook.schema.query[0]) {\n                const invalidQuery = createParser(\n                    'query',\n                    query,\n                    hook.schema.query\n                )\n                if (invalidQuery) return invalidQuery\n            }\n\n            if (hook.schema.header[0]) {\n                const invalidHeader = createParser(\n                    'headers',\n                    parseHeader(request.headers),\n                    hook.schema.header\n                )\n                if (invalidHeader) return invalidHeader\n            }\n        }\n\n        if (hook.preHandler[0]) {\n            const preHandled = await runPreHandler(hook.preHandler)\n            if (preHandled) return preHandled\n        }\n\n        let response = handler(parsedRequest, store)\n        if (isPromise(response)) response = await response\n\n        switch (typeof response) {\n            case 'string':\n                return new Response(response)\n\n            case 'object':\n                try {\n                    return new Response(\n                        JSON.stringify(response),\n                        Object.assign({}, jsonHeader, {\n                            headers: parsedRequest.responseHeader\n                        })\n                    )\n                } catch (error) {\n                    throw error\n                }\n\n            case 'function':\n                const res = response as Response\n\n                for (const [key, value] of Object.entries(\n                    parsedRequest.responseHeader\n                ))\n                    res.headers.append(key, value)\n\n                return res\n\n            case 'number':\n            case 'boolean':\n                return new Response(response.toString(), {\n                    headers: parsedRequest.responseHeader\n                })\n\n            case 'undefined':\n                return new Response('', {\n                    headers: parsedRequest.responseHeader\n                })\n\n            default:\n                return new Response(response, {\n                    headers: parsedRequest.responseHeader\n                })\n        }\n    }\n\n    listen(port: number) {\n        // @ts-ignore\n        if (!Bun) throw new Error('KINGWORLD required Bun to run')\n\n        try {\n            // @ts-ignore\n            Bun.serve({\n                port,\n                fetch: this.handle\n            })\n        } catch (error) {\n            throw error\n        }\n\n        return this\n    }\n}\n\nexport { validate }\n\nexport type {\n    Handler,\n    EmptyHandler,\n    Hook,\n    HookEvent,\n    RegisterHook,\n    ParsedRequest,\n    PreRequestHandler,\n    TypedRoute,\n    Schemas,\n    Plugin\n} from './types'\n"],"names":["StringTheocracy","validate","composePreHandler","composeHandler","mergeHook","parseHeader","isPromise","clone","jsonHeader","Object","freeze","headers","KingWorld","ref","constructor","router","store","hook","onRequest","transform","preHandler","schema","body","header","query","params","default","Response","status","addHandler","method","path","handler","on","push","concat","when","type","group","prefix","run","instance","assign","values","routes","forEach","guard","use","plugin","config","get","post","put","patch","delete","options","head","trace","connect","off","state","name","value","handle","request","key","Promise","resolve","found","find","url","getBody","text","then","startsWith","JSON","parse","parsedRequest","responseHeader","runPreHandler","h","transformed","createParser","schemas","validated","error","invalidBody","invalidParams","invalidQuery","invalidHeader","preHandled","response","stringify","res","entries","append","toString","listen","port","Bun","Error","serve","fetch"],"mappings":"AAAA,OAAOA,CAAe,KAA2B,kBAAkB,AAEnE,QAAOC,CAAQ,KAAM,yBAAyB,AAE9C,QAASC,iBAAiB,IAAjBA,CAAiB,CAAEC,cAAc,IAAdA,CAAc,KAAQ,WAAW,AAC7D,QAEIC,SAAS,IAATA,CAAS,CACTC,WAAW,IAAXA,CAAW,CACXC,SAAS,IAATA,CAAS,CACTC,KAAK,IAALA,CAAK,KACF,SAAS,AAmBhB,KAAMC,CAAU,CAAGC,MAAM,CAACC,MAAM,CAAC,CAC7BC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CACrC,CACJ,CAAC,AAEF,gBAAe,MAAMC,CAAS,CAK1B,CAACC,CAAG,AAAkC,AAGtCC,cAAc,CACV,IAAI,CAACC,MAAM,CAAG,IAAIf,CAAe,AAAE,CAEnC,IAAI,CAACgB,KAAK,CAAG,EAAE,AAAqB,CACpC,IAAI,CAAC,CAACH,CAAG,CAAG,EAAE,CACd,IAAI,CAACI,IAAI,CAAG,CACRC,SAAS,CAAE,EAAE,CACbC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,MAAM,CAAE,CACJC,IAAI,CAAE,EAAE,CACRC,MAAM,CAAE,EAAE,CACVC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACb,CACJ,CAED,IAAI,CAACC,OAAO,CACR,IACI,IAAIC,QAAQ,CAAC,WAAW,CAAE,CACtBC,MAAM,CAAE,GAAG,CACd,CAAC,CACT,CACJ,AAED,CAAA,CAACC,CAAU,CACPC,CAAkB,CAClBC,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CACE,IAAI,CAACF,MAAM,CAACkB,EAAE,CACVH,CAAM,CACNC,CAAI,CACJ5B,CAAc,CACV6B,CAAO,CACPzB,CAAK,CAACH,CAAS,CAAC,IAAI,CAACa,IAAI,CAAUA,CAAI,CAAiB,CAAC,CAC5D,CACJ,CACJ,AAEDC,SAAS,CAACc,CAA6C,CAAE,CAGrD,OAFA,IAAI,CAACf,IAAI,CAACC,SAAS,CAACgB,IAAI,CAACF,CAAO,CAAC,CAE1B,IAAI,CACd,AAEDb,SAAS,CAACa,CAA8B,CAAE,CAGtC,OAFA,IAAI,CAACf,IAAI,CAACE,SAAS,CAACe,IAAI,CAACF,CAAO,CAAC,CAE1B,IAAI,CACd,AAEDX,MAAM,CAACA,CAAe,CAAE,CAepB,OAdIA,CAAM,CAACC,IAAI,EACX,CAAA,IAAI,CAACL,IAAI,CAACI,MAAM,CAACC,IAAI,CAAG,IAAI,CAACL,IAAI,CAACI,MAAM,CAACC,IAAI,CAACa,MAAM,CAACd,CAAM,CAACC,IAAI,CAAC,CAAA,CAEjED,CAAM,CAACE,MAAM,EACb,CAAA,IAAI,CAACN,IAAI,CAACI,MAAM,CAACC,IAAI,CAAG,IAAI,CAACL,IAAI,CAACI,MAAM,CAACC,IAAI,CAACa,MAAM,CAACd,CAAM,CAACE,MAAM,CAAC,CAAA,CAEnEF,CAAM,CAACI,MAAM,EACb,CAAA,IAAI,CAACR,IAAI,CAACI,MAAM,CAACI,MAAM,CAAG,IAAI,CAACR,IAAI,CAACI,MAAM,CAACC,IAAI,CAACa,MAAM,CAClDd,CAAM,CAACI,MAAM,CAChB,CAAA,CAEDJ,CAAM,CAACG,KAAK,EACZ,CAAA,IAAI,CAACP,IAAI,CAACI,MAAM,CAACG,KAAK,CAAG,IAAI,CAACP,IAAI,CAACI,MAAM,CAACC,IAAI,CAACa,MAAM,CAACd,CAAM,CAACG,KAAK,CAAC,CAAA,CAEhE,IAAI,CACd,AAEDJ,UAAU,CAACY,CAA8B,CAAE,CAGvC,OAFA,IAAI,CAACf,IAAI,CAACG,UAAU,CAACc,IAAI,CAACF,CAAO,CAAC,CAE3B,IAAI,CACd,AAEDI,IAAI,CACAC,CAAW,CACXL,CAA+C,CACjD,CACE,OAAQK,CAAI,EACR,IAAK,WAAW,CACZ,IAAI,CAACpB,IAAI,CAACC,SAAS,CAACgB,IAAI,CACpBF,CAAO,CACV,AAEL,KAAK,WAAW,CACZ,IAAI,CAACf,IAAI,CAACE,SAAS,CAACe,IAAI,CAACF,CAAO,CAA0B,AAE9D,KAAK,YAAY,CACb,IAAI,CAACf,IAAI,CAACG,UAAU,CAACc,IAAI,CAACF,CAAO,CAA0B,CAClE,AAED,OAAO,IAAI,CACd,AAEDM,KAAK,CAACC,CAAc,CAAEC,CAAyC,CAAE,CAC7D,IAAMC,CAAQ,CAAG,IAAI7B,CAAS,AAAY,AAW1C,QAVA4B,CAAG,CAACC,CAAQ,CAAC,CAEb,IAAI,CAACzB,KAAK,CAAGP,MAAM,CAACiC,MAAM,CAAC,IAAI,CAAC1B,KAAK,CAAEyB,CAAQ,CAACzB,KAAK,CAAC,CAEtDP,MAAM,CAACkC,MAAM,CAACF,CAAQ,CAAC1B,MAAM,CAAC6B,MAAM,CAAC,CAACC,OAAO,CACzC,CAAC,CAAEf,MAAM,CAANA,CAAM,CAAEC,IAAI,CAAJA,CAAI,CAAEC,OAAO,CAAPA,CAAO,CAAE,GAAK,CAC3B,IAAI,CAACjB,MAAM,CAACkB,EAAE,CAACH,CAAM,CAAE,CAAC,EAAES,CAAM,CAAC,CAAC,EAAER,CAAI,CAAC,CAAC,CAAEC,CAAO,CAAC,CACvD,CACJ,CAEM,IAAI,CACd,AAEDc,KAAK,CACD7B,CAAiC,CACjCuB,CAAyC,CAC3C,CACE,IAAMC,CAAQ,CAAG,IAAI7B,CAAS,AAAY,AAS1C,QARA4B,CAAG,CAACC,CAAQ,CAAC,CAEb,IAAI,CAACzB,KAAK,CAAGP,MAAM,CAACiC,MAAM,CAAC,IAAI,CAAC1B,KAAK,CAAEyB,CAAQ,CAACzB,KAAK,CAAC,CAEtDyB,CAAQ,CAAC1B,MAAM,CAAC6B,MAAM,CAACC,OAAO,CAAC,CAAC,CAAEf,MAAM,CAANA,CAAM,CAAEC,IAAI,CAAJA,CAAI,CAAEC,OAAO,CAAPA,CAAO,CAAE,GAAK,CAC1D,IAAI,CAACjB,MAAM,CAACkB,EAAE,CAACH,CAAM,CAAEC,CAAI,CAAEC,CAAO,CAAC,CACxC,CAAC,CAEK,IAAI,CACd,AAEDe,GAAG,CAKCC,CAAuD,CACvDC,CAAe,CACqB,CAGpC,OAAOD,CAAM,CAAC,IAAI,CAASC,CAAM,CAAC,AAAO,CAC5C,AAEDC,GAAG,CACCnB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,KAAK,CAAEE,CAAI,CAAEC,CAAO,CAAEf,CAAI,CAAC,CAErC,IAAI,CACd,AAEDkC,IAAI,CACApB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,MAAM,CAAEE,CAAI,CAAEC,CAAO,CAAEf,CAAI,CAAC,CAEtC,IAAI,CACd,AAEDmC,GAAG,CACCrB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,KAAK,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAE/B,IAAI,CACd,AAEDqB,KAAK,CACDtB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,OAAO,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAEjC,IAAI,CACd,AAEDsB,MAAM,CACFvB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,QAAQ,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAElC,IAAI,CACd,AAEDuB,OAAO,CACHxB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,SAAS,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAEnC,IAAI,CACd,AAEDwB,IAAI,CACAzB,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,MAAM,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAEhC,IAAI,CACd,AAEDyB,KAAK,CACD1B,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,OAAO,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAEjC,IAAI,CACd,AAED0B,OAAO,CACH3B,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAAC,SAAS,CAAEE,CAAI,CAAEC,CAAO,CAAC,CAEnC,IAAI,CACd,AAEDC,EAAE,CACEH,CAAkB,CAClBC,CAAY,CACZC,CAAiC,CACjCf,CAAoC,CACtC,CAGE,OAFA,IAAI,CAAC,CAACY,CAAU,CAACC,CAAM,CAAEC,CAAI,CAAEC,CAAO,CAAEf,CAAI,CAAC,CAEtC,IAAI,CACd,AAED0C,GAAG,CAAC7B,CAAkB,CAAEC,CAAY,CAAE,CAClC,IAAI,CAAChB,MAAM,CAAC4C,GAAG,CAAC7B,CAAM,CAAEC,CAAI,CAAC,CAChC,AAEDL,OAAO,CACHM,CAAiC,CACjCf,CAA0B,CAC5B,CAQE,OAPA,IAAI,CAACF,MAAM,CAACW,OAAO,CACfvB,CAAc,CACV6B,CAAO,CACP5B,CAAS,CAACG,CAAK,CAAC,IAAI,CAACU,IAAI,CAAC,CAAUA,CAAI,CAAiB,CAC5D,CACJ,CAEM,IAAI,CACd,AAED2C,KAAK,CACDC,CAA6B,CAC7BC,CAAiD,CACnD,CAGE,OAFA,IAAI,CAAC9C,KAAK,CAAC6C,CAAI,CAAC,CAAGC,CAAK,CAEjB,IAAI,CACd,AAEDjD,GAAG,CACCgD,CAA6B,CAC7BC,CAGiE,CACnE,CAGE,OAFA,IAAI,CAAC,CAACjD,CAAG,CAACqB,IAAI,CAAC,CAAC2B,CAAI,CAAEC,CAAK,CAAC,CAAC,CAEtB,IAAI,CACd,AAEDC,MAAM,CAAG,MAAOC,CAAgB,EAAK,CACjC,IAAMhD,CAAK,CAA+BP,MAAM,CAACiC,MAAM,CAAC,EAAE,CAAE,IAAI,CAAC1B,KAAK,CAAC,AAEvE,IAAI,IAAI,CAAC,CAACH,CAAG,CAAC,CAAC,CAAC,CACZ,IAAK,GAAM,CAACoD,CAAG,CAAEH,CAAK,CAAC,GAAI,IAAI,CAAC,CAACjD,CAAG,CAChCG,CAAK,CAACiD,CAAG,CAAC,CACN,AAAiB,UAAU,EAA3B,OAAOH,CAAK,AAAe,CACrBI,OAAO,CAACC,OAAO,CAACL,CAAK,EAAE,CAAC,CACxBA,CAAK,AAEvB,IAAI,IAAI,CAAC7C,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CACtB,IAAK,IAAMA,CAAS,IAAI,IAAI,CAACD,IAAI,CAACC,SAAS,CACvCgD,OAAO,CAACC,OAAO,CAACjD,CAAS,CAAC8C,CAAO,CAAEhD,CAAK,CAAC,CAAC,AAElD,IAAM,CACFoD,KAAK,CAALA,CAAK,CACLtC,MAAM,CAANA,CAAM,CACNC,IAAI,CAAJA,CAAI,CACJC,OAAO,CAAE+B,CAAM,CACftC,MAAM,CAANA,CAAM,CACND,KAAK,CAALA,CAAK,CACR,CAAG,IAAI,CAACT,MAAM,CAACsD,IAAI,CAACL,CAAO,CAAClC,MAAM,CAAgBkC,CAAO,CAACM,GAAG,CAAC,CAE3DhD,CAAI,AAAiB,CACnBiD,CAAO,CAAG,SACZ,AAAIjD,CAAI,EAERA,CAAAA,CAAI,CAAG,MAAM4C,OAAO,CAACC,OAAO,CACxBH,CAAO,CACFQ,IAAI,EAAE,CACNC,IAAI,CAAC,AAACnD,CAAY,EACfA,CAAI,CAACoD,UAAU,CAAC,GAAG,CAAC,EAAIpD,CAAI,CAACoD,UAAU,CAAC,GAAG,CAAC,CACtCC,IAAI,CAACC,KAAK,CAACtD,CAAI,CAAC,CAChBA,CAAI,CACb,CACR,CAAA,AAVoB,AAaxB,CAGKuD,CAAa,CAAkB,CACjCb,OAAO,CAAPA,CAAO,CACPvC,MAAM,CAANA,CAAM,CACND,KAAK,CAALA,CAAK,CACLb,OAAO,CAAE,IAAMN,CAAW,CAAC2D,CAAO,CAACrD,OAAO,CAAC,CAC3CW,IAAI,CAAEiD,CAAO,CACbO,cAAc,CAAE,EAAE,CACrB,AAAiB,CAEZ,CAAC9C,CAAO,CAAEf,CAAI,CAAC,CAAG8C,CAAM,AA7BiC,AA+B/D,IAAI,CAACK,CAAK,CAAE,OAAOpC,CAAO,CAAC6C,CAAa,CAAE7D,CAAK,CAAC,AAEhD,KAAM+D,CAAa,CAAG,AAACC,CAAY,EAC/B9E,CAAiB,CAAW8E,CAAC,CAAEH,CAAa,CAAE7D,CAAK,CAAC,AAExD,IAAIC,CAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAAE,CACnB,IAAM8D,CAAW,CAAG,MAAMF,CAAa,CAAC9D,CAAI,CAACE,SAAS,CAAC,AACvD,IAAI8D,CAAW,CAAE,OAAOA,CAAW,CACtC,AAED,GACIhE,CAAI,CAACI,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,EACnBL,CAAI,CAACI,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EACrBN,CAAI,CAACI,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,EACrBR,CAAI,CAACI,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CACtB,CACE,IAAM0D,CAAY,CAAG,CACjB7C,CAAY,CACZyB,CAAU,CACVqB,CAAqB,GACpB,CACD,IAAK,IAAM9D,CAAM,IAAI8D,CAAO,CACxB,GAAI,CACA,IAAMC,CAAS,CAAGnF,CAAQ,CAAC6D,CAAK,CAAEzC,CAAM,CAAC,AAEzC,IAAI,CAAC+D,CAAS,CACV,OAAO,IAAIzD,QAAQ,CAAC,CAAC,QAAQ,EAAEU,CAAI,CAAC,CAAC,CAAE,CACnCT,MAAM,CAAE,GAAG,CACd,CAAC,CACT,AAAC,MAAOyD,CAAK,CAAE,CACZ,OAAO,IAAI1D,QAAQ,CAAC,CAAC,gBAAgB,EAAEU,CAAI,CAAC,CAAC,CAAE,CAC3CT,MAAM,CAAE,GAAG,CACd,CAAC,CACL,CACR,AAED,IAAIX,CAAI,CAACI,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE,CACrB,IAAMgE,CAAW,CAAGJ,CAAY,CAC5B,MAAM,CACN,MAAMX,CAAO,EAAE,CACftD,CAAI,CAACI,MAAM,CAACC,IAAI,CACnB,AACD,IAAIgE,CAAW,CAAE,OAAOA,CAAW,CACtC,AAED,GAAIrE,CAAI,CAACI,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,CAAE,CACvB,IAAM8D,CAAa,CAAGL,CAAY,CAC9B,QAAQ,CACRzD,CAAM,CACNR,CAAI,CAACI,MAAM,CAACI,MAAM,CACrB,AACD,IAAI8D,CAAa,CAAE,OAAOA,CAAa,CAC1C,AAED,GAAItE,CAAI,CAACI,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CAAE,CACtB,IAAMgE,CAAY,CAAGN,CAAY,CAC7B,OAAO,CACP1D,CAAK,CACLP,CAAI,CAACI,MAAM,CAACG,KAAK,CACpB,AACD,IAAIgE,CAAY,CAAE,OAAOA,CAAY,CACxC,AAED,GAAIvE,CAAI,CAACI,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAAE,CACvB,IAAMkE,CAAa,CAAGP,CAAY,CAC9B,SAAS,CACT7E,CAAW,CAAC2D,CAAO,CAACrD,OAAO,CAAC,CAC5BM,CAAI,CAACI,MAAM,CAACE,MAAM,CACrB,AACD,IAAIkE,CAAa,CAAE,OAAOA,CAAa,CAC1C,CACJ,AAED,GAAIxE,CAAI,CAACG,UAAU,CAAC,CAAC,CAAC,CAAE,CACpB,IAAMsE,CAAU,CAAG,MAAMX,CAAa,CAAC9D,CAAI,CAACG,UAAU,CAAC,AACvD,IAAIsE,CAAU,CAAE,OAAOA,CAAU,CACpC,AAED,IAAIC,CAAQ,CAAG3D,CAAO,CAAC6C,CAAa,CAAE7D,CAAK,CAAC,AAG5C,QAFIV,CAAS,CAACqF,CAAQ,CAAC,EAAEA,CAAAA,CAAQ,CAAG,MAAMA,CAAQ,CAAA,CAE1C,OAAOA,CAAQ,EACnB,IAAK,QAAQ,CACT,OAAO,IAAIhE,QAAQ,CAACgE,CAAQ,CAAC,AAEjC,KAAK,QAAQ,CACT,GAAI,CACA,OAAO,IAAIhE,QAAQ,CACfgD,IAAI,CAACiB,SAAS,CAACD,CAAQ,CAAC,CACxBlF,MAAM,CAACiC,MAAM,CAAC,EAAE,CAAElC,CAAU,CAAE,CAC1BG,OAAO,CAAEkE,CAAa,CAACC,cAAc,CACxC,CAAC,CACL,CACJ,AAAC,MAAOO,CAAK,CAAE,CACZ,MAAMA,CAAK,CACd,AAEL,IAAK,UAAU,CACX,IAAMQ,CAAG,CAAGF,CAAQ,AAAY,AAEhC,KAAK,GAAM,CAAC1B,CAAG,CAAEH,CAAK,CAAC,GAAIrD,MAAM,CAACqF,OAAO,CACrCjB,CAAa,CAACC,cAAc,CAC/B,CACGe,CAAG,CAAClF,OAAO,CAACoF,MAAM,CAAC9B,CAAG,CAAEH,CAAK,CAAC,AAElC,QAAO+B,CAAG,AAEd,KAAK,QAAQ,CAAC,AACd,IAAK,SAAS,CACV,OAAO,IAAIlE,QAAQ,CAACgE,CAAQ,CAACK,QAAQ,EAAE,CAAE,CACrCrF,OAAO,CAAEkE,CAAa,CAACC,cAAc,CACxC,CAAC,AAEN,KAAK,WAAW,CACZ,OAAO,IAAInD,QAAQ,CAAC,EAAE,CAAE,CACpBhB,OAAO,CAAEkE,CAAa,CAACC,cAAc,CACxC,CAAC,AAEN,SACI,OAAO,IAAInD,QAAQ,CAACgE,CAAQ,CAAE,CAC1BhF,OAAO,CAAEkE,CAAa,CAACC,cAAc,CACxC,CAAC,CACT,CACJ,AAEDmB,CAAAA,MAAM,CAACC,CAAY,CAAE,CAEjB,GAAI,CAACC,GAAG,CAAE,MAAM,AAAIC,KAAK,CAAC,+BAA+B,CAAC,AAE1D,IAAI,CAEAD,GAAG,CAACE,KAAK,CAAC,CACNH,IAAI,CAAJA,CAAI,CACJI,KAAK,CAAE,IAAI,CAACvC,MAAM,CACrB,CAAC,CACL,AAAC,MAAOsB,CAAK,CAAE,CACZ,MAAMA,CAAK,CACd,AAED,OAAO,IAAI,CACd,CACJ,QAEQpF,CAAQ,IAARA,QAAQ,CAaD"}