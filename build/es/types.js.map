{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["import { type ParsedUrlQuery } from './lib/find-my-world'\n\nimport type KingWorld from './index'\nimport { type JSONSchema } from 'fluent-json-schema'\n\nexport interface KingWorldInstance<\n    Store extends Record<string, any> = {},\n    Request extends Record<string, any> = {}\n> {\n    Request?: Request\n    Store: Store\n}\n\n// @ts-ignore\nexport interface KingWorldRequest<Body extends unknown = unknown>\n    extends Request {\n    json(): Promise<Body>\n}\n\nexport type ParsedRequest<Route extends TypedRoute = TypedRoute> = {\n    request: KingWorldRequest<Route['body']>\n    query: ParsedUrlQuery & Route['query']\n    params: Route['params']\n    readonly headers: () => Route['header']\n    readonly body: () => Promise<Route['body']>\n    responseHeader: Record<string, any>\n} & Omit<Route, 'body' | 'query' | 'header' | 'body'>\n\nexport type EmptyHandler = (request: Request) => Response\nexport type Handler<\n    Route extends TypedRoute = TypedRoute,\n    Instance extends KingWorldInstance = KingWorldInstance\n> = (\n    request: ParsedRequest<Route & Instance['Request']>,\n    store: Instance['Store']\n) => any | Promise<any>\n\nexport type HookEvent = 'onRequest' | 'transform' | 'transform'\n\nexport type PreRequestHandler<Store extends Record<string, any> = {}> = (\n    request: Request,\n    store: Store\n) => void\n\nexport interface Hook<Instance extends KingWorldInstance = KingWorldInstance> {\n    onRequest: PreRequestHandler<Instance['Store']>[]\n    transform: Handler<{}, Instance>[]\n    preHandler: Handler<{}, Instance>[]\n    schema: {\n        body: JSONSchema[]\n        header: JSONSchema[]\n        query: JSONSchema[]\n        params: JSONSchema[]\n    }\n}\n\nexport interface Schemas {\n    body?: JSONSchema | JSONSchema[]\n    header?: JSONSchema | JSONSchema[]\n    query?: JSONSchema | JSONSchema[]\n    params?: JSONSchema | JSONSchema[]\n}\n\nexport interface RegisterHook<\n    Route extends TypedRoute = TypedRoute,\n    Instance extends KingWorldInstance = KingWorldInstance\n> {\n    transform?: Handler<Route, Instance> | Handler<Route, Instance>[]\n    onRequest?: PreRequestHandler<Instance> | PreRequestHandler<Instance>[]\n    preHandler?: Handler<Route, Instance> | Handler<Route, Instance>[]\n    schema?: Schemas\n}\n\nexport interface TypedRoute {\n    body?: unknown\n    header?: Record<string, unknown>\n    query?: Record<string, unknown>\n    params?: Record<string, unknown>\n}\n\nexport type Plugin<\n    T = Record<string, unknown>,\n    PluginInstance extends KingWorldInstance = KingWorldInstance,\n    BaseInstance extends KingWorldInstance = KingWorldInstance<{\n        Request: {}\n        Store: {}\n    }>\n> = (\n    app: KingWorld<BaseInstance & PluginInstance>,\n    config?: T\n) => KingWorld<BaseInstance & PluginInstance>\n\nexport type ComposedHandler = [Handler<any, any>, Hook<any>]\n"],"names":[],"mappings":"AAAA,QA4F4D"}