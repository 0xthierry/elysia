{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import StringTheocracy, { type HTTPMethod } from 'string-theocracy'\n\nimport validate from 'fluent-schema-validator'\n\nimport { composePreHandler, composeHandler } from './handler'\nimport {\n    concatArrayObject,\n    mergeHook,\n    parseHeader,\n    isPromise,\n    clone\n} from './utils'\n\nimport type { JSONSchema } from 'fluent-json-schema'\n\nimport type {\n    Handler,\n    EmptyHandler,\n    Hook,\n    HookEvent,\n    RegisterHook,\n    PreRequestHandler,\n    TypedRoute,\n    Schemas,\n    Plugin,\n    ParsedRequest,\n    KingWorldInstance,\n    ComposedHandler\n} from './types'\n\nconst jsonHeader = Object.freeze({\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n\nexport default class KingWorld<\n    Instance extends KingWorldInstance = KingWorldInstance\n> {\n    router: StringTheocracy<ComposedHandler>\n    store: Instance['Store']\n    #ref: [keyof Instance['Store'], any][]\n    hook: Hook<Instance>\n\n    constructor() {\n        this.router = new StringTheocracy()\n\n        this.store = {} as Instance['Store']\n        this.#ref = []\n        this.hook = {\n            onRequest: [],\n            transform: [],\n            preHandler: [],\n            schema: {\n                body: [],\n                header: [],\n                query: [],\n                params: []\n            }\n        }\n\n        this.default(\n            () =>\n                new Response('Not Found', {\n                    status: 404\n                })\n        )\n    }\n\n    #addHandler<Route extends TypedRoute = TypedRoute>(\n        method: HTTPMethod,\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.router.on(\n            method,\n            path,\n            composeHandler(\n                handler,\n                clone(mergeHook(this.hook as Hook, hook as RegisterHook))\n            )\n        )\n    }\n\n    onRequest(handler: PreRequestHandler<Instance['Store']>) {\n        this.hook.onRequest.push(handler)\n\n        return this\n    }\n\n    transform(handler: Handler<{}, Instance>) {\n        this.hook.transform.push(handler)\n\n        return this\n    }\n\n    schema(schema: Schemas) {\n        if (schema.body)\n            this.hook.schema.body = this.hook.schema.body.concat(schema.body)\n\n        if (schema.header)\n            this.hook.schema.body = this.hook.schema.body.concat(schema.header)\n\n        if (schema.params)\n            this.hook.schema.params = this.hook.schema.body.concat(\n                schema.params\n            )\n\n        if (schema.query)\n            this.hook.schema.query = this.hook.schema.body.concat(schema.query)\n\n        return this\n    }\n\n    preHandler(handler: Handler<{}, Instance>) {\n        this.hook.preHandler.push(handler)\n\n        return this\n    }\n\n    when<Event extends HookEvent = HookEvent>(\n        type: Event,\n        handler: RegisterHook<Instance['Store']>[Event]\n    ) {\n        switch (type) {\n            case 'onRequest':\n                this.hook.onRequest.push(\n                    handler as PreRequestHandler<Instance['Store']>\n                )\n\n            case 'transform':\n                this.hook.transform.push(handler as Handler<{}, Instance>)\n\n            case 'preHandler':\n                this.hook.preHandler.push(handler as Handler<{}, Instance>)\n        }\n\n        return this\n    }\n\n    group(prefix: string, run: (group: KingWorld<Instance>) => void) {\n        const instance = new KingWorld<Instance>()\n        run(instance)\n\n        this.store = Object.assign(this.store, instance.store)\n\n        Object.values(instance.router.routes).forEach(\n            ({ method, path, handler }) => {\n                this.router.on(method, `${prefix}/${path}`, handler)\n            }\n        )\n\n        return this\n    }\n\n    guard(\n        hook: RegisterHook<any, Instance>,\n        run: (group: KingWorld<Instance>) => void\n    ) {\n        const instance = new KingWorld<Instance>()\n        run(instance)\n\n        this.store = Object.assign(this.store, instance.store)\n\n        instance.router.routes.forEach(({ method, path, handler }) => {\n            this.router.on(method, path, handler)\n        })\n\n        return this\n    }\n\n    use<\n        CurrentInstance extends KingWorldInstance = Instance,\n        Config = Object,\n        PluginInstance extends KingWorldInstance = KingWorldInstance\n    >(\n        plugin: Plugin<Config, PluginInstance, CurrentInstance>,\n        config?: Config\n    ): KingWorld<Instance & PluginInstance> {\n        // ? Need hack, because instance need to have both type\n        // ? but before transform type won't we available\n        return plugin(this as any, config) as any\n    }\n\n    get<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('GET', path, handler, hook)\n\n        return this\n    }\n\n    post<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('POST', path, handler, hook)\n\n        return this\n    }\n\n    put<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('PUT', path, handler)\n\n        return this\n    }\n\n    patch<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('PATCH', path, handler)\n\n        return this\n    }\n\n    delete<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('DELETE', path, handler)\n\n        return this\n    }\n\n    options<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('OPTIONS', path, handler)\n\n        return this\n    }\n\n    head<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('HEAD', path, handler)\n\n        return this\n    }\n\n    trace<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('TRACE', path, handler)\n\n        return this\n    }\n\n    connect<Route extends TypedRoute = TypedRoute>(\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler('CONNECT', path, handler)\n\n        return this\n    }\n\n    on<Route extends TypedRoute = TypedRoute>(\n        method: HTTPMethod,\n        path: string,\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route, Instance>\n    ) {\n        this.#addHandler(method, path, handler, hook)\n\n        return this\n    }\n\n    off(method: HTTPMethod, path: string) {\n        this.router.off(method, path)\n    }\n\n    default<Route extends TypedRoute = TypedRoute>(\n        handler: Handler<Route, Instance>,\n        hook?: RegisterHook<Route>\n    ) {\n        this.router.default(\n            composeHandler(\n                handler,\n                mergeHook(clone(this.hook) as Hook, hook as RegisterHook)\n            )\n        )\n\n        return this\n    }\n\n    state(\n        name: keyof Instance['Store'],\n        value: Instance['Store'][keyof Instance['Store']]\n    ) {\n        this.store[name] = value\n\n        return this\n    }\n\n    ref(\n        name: keyof Instance['Store'],\n        value:\n            | Instance['Store'][keyof Instance['Store']]\n            | (() => Instance['Store'][keyof Instance['Store']])\n            | (() => Promise<Instance['Store'][keyof Instance['Store']]>)\n    ) {\n        this.#ref.push([name, value])\n\n        return this\n    }\n\n    handle = async (request: Request) => {\n        const store: Partial<Instance['Store']> = Object.assign({}, this.store)\n\n        if (this.#ref[0])\n            for (const [key, value] of this.#ref)\n                store[key] =\n                    typeof value === 'function'\n                        ? Promise.resolve(value())\n                        : value\n\n        if (this.hook.onRequest[0])\n            for (const onRequest of this.hook.onRequest)\n                Promise.resolve(onRequest(request, store))\n\n        const {\n            found,\n            method,\n            path,\n            handler: handle,\n            params,\n            query\n        } = this.router.find(request.method as HTTPMethod, request.url)\n\n        let body: string | Object\n        const getBody = async () => {\n            if (body) return body\n\n            body = await Promise.resolve(\n                request\n                    .text()\n                    .then((body: string) =>\n                        body.startsWith('{') || body.startsWith('[')\n                            ? JSON.parse(body)\n                            : body\n                    )\n            )\n\n            return body\n        }\n\n        // ? Might have additional field attach from plugin, so forced type cast here\n        const parsedRequest: ParsedRequest = {\n            request,\n            params,\n            query,\n            headers: () => parseHeader(request.headers),\n            body: getBody,\n            responseHeader: {}\n        } as ParsedRequest\n\n        const [handler, hook] = handle\n\n        if (!found) return handler(parsedRequest, store)\n\n        const runPreHandler = (h: Handler[]) =>\n            composePreHandler<Instance>(h, parsedRequest, store)\n\n        if (hook.transform[0]) {\n            const transformed = await runPreHandler(hook.transform)\n            if (transformed) return transformed\n        }\n\n        if (\n            hook.schema.body[0] ||\n            hook.schema.header[0] ||\n            hook.schema.params[0] ||\n            hook.schema.query[0]\n        ) {\n            const createParser = (\n                type: string,\n                value: any,\n                schemas: JSONSchema[]\n            ) => {\n                for (const schema of schemas)\n                    try {\n                        const validated = validate(value, schema)\n\n                        if (!validated)\n                            return new Response(`Invalid ${type}`, {\n                                status: 400\n                            })\n                    } catch (error) {\n                        return new Response(`Unable to parse ${type}`, {\n                            status: 422\n                        })\n                    }\n            }\n\n            if (hook.schema.body[0]) {\n                const invalidBody = createParser(\n                    'body',\n                    await getBody(),\n                    hook.schema.body\n                )\n                if (invalidBody) return invalidBody\n            }\n\n            if (hook.schema.params[0]) {\n                const invalidParams = createParser(\n                    'params',\n                    params,\n                    hook.schema.params\n                )\n                if (invalidParams) return invalidParams\n            }\n\n            if (hook.schema.query[0]) {\n                const invalidQuery = createParser(\n                    'query',\n                    query,\n                    hook.schema.query\n                )\n                if (invalidQuery) return invalidQuery\n            }\n\n            if (hook.schema.header[0]) {\n                const invalidHeader = createParser(\n                    'headers',\n                    parseHeader(request.headers),\n                    hook.schema.header\n                )\n                if (invalidHeader) return invalidHeader\n            }\n        }\n\n        if (hook.preHandler[0]) {\n            const preHandled = await runPreHandler(hook.preHandler)\n            if (preHandled) return preHandled\n        }\n\n        let response = handler(parsedRequest, store)\n        if (isPromise(response)) response = await response\n\n        switch (typeof response) {\n            case 'string':\n                return new Response(response)\n\n            case 'object':\n                try {\n                    return new Response(\n                        JSON.stringify(response),\n                        Object.assign({}, jsonHeader, {\n                            headers: parsedRequest.responseHeader\n                        })\n                    )\n                } catch (error) {\n                    throw error\n                }\n\n            case 'function':\n                const res = response as Response\n\n                for (const [key, value] of Object.entries(\n                    parsedRequest.responseHeader\n                ))\n                    res.headers.append(key, value)\n\n                return res\n\n            case 'number':\n            case 'boolean':\n                return new Response(response.toString(), {\n                    headers: parsedRequest.responseHeader\n                })\n\n            case 'undefined':\n                return new Response('', {\n                    headers: parsedRequest.responseHeader\n                })\n\n            default:\n                return new Response(response, {\n                    headers: parsedRequest.responseHeader\n                })\n        }\n    }\n\n    listen(port: number) {\n        // @ts-ignore\n        if (!Bun) throw new Error('KINGWORLD required Bun to run')\n\n        try {\n            // @ts-ignore\n            Bun.serve({\n                port,\n                fetch: this.handle\n            })\n        } catch (error) {\n            throw error\n        }\n\n        return this\n    }\n}\n\nexport { validate }\n\nexport type {\n    Handler,\n    EmptyHandler,\n    Hook,\n    HookEvent,\n    RegisterHook,\n    ParsedRequest,\n    PreRequestHandler,\n    TypedRoute,\n    Schemas,\n    Plugin\n} from './types'\n"],"names":["KingWorld","validate","jsonHeader","Object","freeze","headers","ref","constructor","router","StringTheocracy","store","hook","onRequest","transform","preHandler","schema","body","header","query","params","default","Response","status","addHandler","method","path","handler","on","composeHandler","clone","mergeHook","push","concat","when","type","group","prefix","run","instance","assign","values","routes","forEach","guard","use","plugin","config","get","post","put","patch","delete","options","head","trace","connect","off","state","name","value","handle","request","key","Promise","resolve","found","find","url","getBody","text","then","startsWith","JSON","parse","parsedRequest","parseHeader","responseHeader","runPreHandler","h","composePreHandler","transformed","createParser","schemas","validated","error","invalidBody","invalidParams","invalidQuery","invalidHeader","preHandled","response","isPromise","stringify","res","entries","append","toString","listen","port","Bun","Error","serve","fetch"],"mappings":"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"}